g_VR = g_VR or {}
vrmod = vrmod or {}
scripted_ents.Register({Type = "anim", Base = "vrmod_pickup"}, "vrmod_pickup")

if CLIENT then
    -- Materials for beam rendering
    local beam_mat1 = Material("sprites/physbeam")
    local beam_mat2 = Material("sprites/physbeama")
    local beam_glow1 = Material("sprites/physg_glow1")
    local beam_glow2 = Material("sprites/physg_glow2")

    function vrmod.Pickup(bLeftHand, bDrop)
        net.Start("vrmod_pickup")
        net.WriteBool(bLeftHand)
        net.WriteBool(bDrop or false)
        
        local pose = bLeftHand and g_VR.tracking.pose_lefthand or g_VR.tracking.pose_righthand
        net.WriteVector(pose.pos)
        net.WriteAngle(pose.ang)
        
        if bDrop then
            net.WriteVector(pose.vel)
            net.WriteVector(pose.angvel)
            g_VR[bLeftHand and "heldEntityLeft" or "heldEntityRight"] = nil
        end
        
        net.SendToServer()
    end
    
    -- Draw physgun beams for both hands
    local function DrawPhysgunBeams()
        if not g_VR.active then return end
        
        local function DrawBeam(hand, heldEnt)
            local startPos = g_VR.tracking["pose_" .. hand .. "hand"].pos
            local forward = g_VR.tracking["pose_" .. hand .. "hand"].ang:Forward()
            
            -- Determine end position
            local endPos
            if heldEnt and IsValid(heldEnt) then
                endPos = heldEnt:GetPos()
            else
                local tr = util.TraceLine({
                    start = startPos,
                    endpos = startPos + forward * 4000,
                    filter = LocalPlayer()
                })
                endPos = tr.HitPos
            end
            
            -- Beam color
            local color = Color(0, 127, 255, 192)
            if heldEnt and IsValid(heldEnt) then
                color = Color(0, 200, 255, 255)
            end
            
            -- Draw main beam
            render.SetMaterial(beam_mat1)
            render.DrawBeam(startPos, endPos, 2, 0, 1, color)
            
            -- Draw secondary beam
            render.SetMaterial(beam_mat2)
            render.DrawBeam(startPos, endPos, 1, 0, 1, Color(color.r, color.g, color.b, color.a * 0.5))
            
            -- Draw glow effects
            render.SetMaterial(beam_glow1)
            local size = math.random(20, 30)
            render.DrawSprite(startPos, size, size, color)
            
            local endSize = heldEnt and IsValid(heldEnt) and math.random(10, 15) or math.random(3, 8)
            render.DrawSprite(endPos, endSize, endSize, color)
        end
        
        -- Draw beams for both hands
        DrawBeam("left", g_VR.heldEntityLeft)
        DrawBeam("right", g_VR.heldEntityRight)
    end
    
    -- Add hook to draw beams
    hook.Add("PostDrawTranslucentRenderables", "vrmod_physgun_beams", function(depth, sky)
        if depth or sky then return end
        DrawPhysgunBeams()
    end)
    
    net.Receive("vrmod_pickup", function(len)
        local ply = net.ReadEntity()
        local ent = net.ReadEntity()
        local bDrop = net.ReadBool()
        
        if bDrop then
            if IsValid(ent) and ent.RenderOverride == ent.VRPickupRenderOverride then
                ent.RenderOverride = nil
            end
            hook.Call("VRMod_Drop", nil, ply, ent)
        else
            local bLeftHand = net.ReadBool()
            local localPos = net.ReadVector()
            local localAng = net.ReadAngle()
            
            local steamid = IsValid(ply) and ply:SteamID()
            if g_VR.net[steamid] == nil then return end
            
            ent.RenderOverride = function()
                if g_VR.net[steamid] == nil then return end
                local wpos, wang
                if bLeftHand then
                    wpos, wang = LocalToWorld(localPos, localAng, g_VR.net[steamid].lerpedFrame.lefthandPos, g_VR.net[steamid].lerpedFrame.lefthandAng)
                else
                    wpos, wang = LocalToWorld(localPos, localAng, g_VR.net[steamid].lerpedFrame.righthandPos, g_VR.net[steamid].lerpedFrame.righthandAng)
                end
                ent:SetPos(wpos)
                ent:SetAngles(wang)
                ent:SetupBones()
                ent:DrawModel()
            end
            ent.VRPickupRenderOverride = ent.RenderOverride
            
            if ply == LocalPlayer() then
                g_VR[bLeftHand and "heldEntityLeft" or "heldEntityRight"] = ent
            end
            
            hook.Call("VRMod_Pickup", nil, ply, ent)
        end
    end)
    
elseif SERVER then
    util.AddNetworkString("vrmod_pickup")
    
    -- Physgun controller settings for each hand
    local PhysgunControllers = {
        left = {
            controller = nil,
            pickupList = {},
            pickupCount = 0
        },
        right = {
            controller = nil,
            pickupList = {},
            pickupCount = 0
        }
    }
    
    -- ConVars for physgun settings
    local physgun_maxrange = CreateConVar("vrmod_physgun_maxrange", "4000", FCVAR_REPLICATED + FCVAR_ARCHIVE, "Maximum range of the VR physgun beam")
    local physgun_maxspeed = CreateConVar("vrmod_physgun_maxspeed", "3000", FCVAR_REPLICATED + FCVAR_ARCHIVE, "Maximum speed for entities moved by the VR physgun")
    local physgun_angdamping = CreateConVar("vrmod_physgun_angdamping", "5000", FCVAR_REPLICATED + FCVAR_ARCHIVE, "Angular damping for the VR physgun")
    
    -- Physics shadow parameters
    local ShadowParams = {
        secondstoarrive = 0.0001,
        maxangular = 5000,
        maxangulardamp = 5000,
        maxspeed = 5000,
        maxspeeddamp = 10000,
        dampfactor = 0.5,
        teleportdistance = 0,
        deltatime = 0
    }
    
    -- Drop entity function
    local function drop(handName, steamid, handPos, handAng, handVel, handAngVel)
        local controller = PhysgunControllers[handName]
        
        for i = 1, controller.pickupCount do
            local t = controller.pickupList[i]
            if t.steamid ~= steamid then continue end
            
            local phys = t.phys
            if IsValid(phys) then
                t.ent:SetCollisionGroup(t.collisionGroup)
                controller.controller:RemoveFromMotionController(phys)
                
                if handPos then
                    local wPos, wAng = LocalToWorld(t.localPos, t.localAng, handPos, handAng)
                    phys:SetPos(wPos)
                    phys:SetAngles(wAng)
                    phys:SetVelocity(t.ply:GetVelocity() + handVel)
                    phys:AddAngleVelocity(-phys:GetAngleVelocity() + phys:WorldToLocalVector(handAngVel))
                    phys:Wake()
                end
            end
            
            net.Start("vrmod_pickup")
                net.WriteEntity(t.ply)
                net.WriteEntity(t.ent)
                net.WriteBool(true) -- drop
            net.Broadcast()
            
            if g_VR[t.steamid] then
                g_VR[t.steamid].heldItems = g_VR[t.steamid].heldItems or {}
                g_VR[t.steamid].heldItems[handName == "left" and 1 or 2] = nil
            end
            
            controller.pickupList[i] = controller.pickupList[controller.pickupCount]
            controller.pickupList[controller.pickupCount] = nil
            controller.pickupCount = controller.pickupCount - 1
            
            if controller.pickupCount == 0 and IsValid(controller.controller) then
                controller.controller:StopMotionController()
                controller.controller:Remove()
                controller.controller = nil
            end
            
            hook.Call("VRMod_Drop", nil, t.ply, t.ent)
            return
        end
    end
    
    -- Pickup entity function
    local function pickup(handName, ply, handPos, handAng)
        local steamid = ply:SteamID()
        local controller = PhysgunControllers[handName]
        
        -- Create forward vector from hand
        local forward = handAng:Forward()
        
        -- Trace from hand position
        local tr = util.TraceLine({
            start = handPos,
            endpos = handPos + forward * physgun_maxrange:GetFloat(),
            filter = ply
        })
        
        -- Check if we hit a valid entity
        if not tr.Hit or not IsValid(tr.Entity) then return end
        local entity = tr.Entity
        
        -- Filter out invalid entities
        -- if entity:IsPlayer() or 
        --    entity:GetClass() == "worldspawn" or 
        --    string.sub(entity:GetClass(), 1, 5) == "func_" or
        --    not IsValid(entity:GetPhysicsObject()) or 
        --    not entity:GetPhysicsObject():IsMoveable() or
        --    entity:GetPhysicsObject():GetMass() > 500 or
        --    entity:GetPhysicsObject():HasGameFlag(FVPHYSICS_MULTIOBJECT_ENTITY) or
        --    (entity.CPPICanPickup and not entity:CPPICanPickup(ply)) then
        --     return
        -- end
        
        -- Check if the hook allows pickup
        if hook.Call("VRMod_Pickup", nil, ply, entity) == false then return end
        
        -- Initialize controller if needed
        if not IsValid(controller.controller) then
            controller.controller = ents.Create("vrmod_pickup")
            controller.controller.ShadowParams = table.Copy(ShadowParams)
            
            function controller.controller:PhysicsSimulate(phys, deltatime)
                phys:Wake()
                local t = phys:GetEntity().vrmod_pickup_info
                local frame = g_VR[t.steamid] and g_VR[t.steamid].latestFrame
                
                if not frame then return end
                
                local handName = t.handName
                local handPos, handAng = LocalToWorld(
                    handName == "left" and frame.lefthandPos or frame.righthandPos,
                    handName == "left" and frame.lefthandAng or frame.righthandAng,
                    t.ply:GetPos(), Angle()
                )
                
                self.ShadowParams.pos, self.ShadowParams.angle = LocalToWorld(t.localPos, t.localAng, handPos, handAng)
                phys:ComputeShadowControl(self.ShadowParams)
            end
            
            controller.controller:StartMotionController()
            
            -- Add tick hook for the first controller created
            if not hook.GetTable()["Tick"]["vrmod_physgun_tick"] then
                hook.Add("Tick", "vrmod_physgun_tick", function()
                    -- Check left hand controller
                    for i = 1, PhysgunControllers.left.pickupCount do
                        local t = PhysgunControllers.left.pickupList[i]
                        if not IsValid(t.phys) or not t.phys:IsMoveable() or not g_VR[t.steamid] or not t.ply:Alive() or t.ply:InVehicle() then
                            drop("left", t.steamid)
                        end
                    end
                    
                    -- Check right hand controller
                    for i = 1, PhysgunControllers.right.pickupCount do
                        local t = PhysgunControllers.right.pickupList[i]
                        if not IsValid(t.phys) or not t.phys:IsMoveable() or not g_VR[t.steamid] or not t.ply:Alive() or t.ply:InVehicle() then
                            drop("right", t.steamid)
                        end
                    end
                end)
            end
        end
        
        -- Check if entity is already being held
        local index = controller.pickupCount + 1
        
        -- Check if entity is already held by this hand
        for k = 1, controller.pickupCount do
            if controller.pickupList[k].ent == entity then
                return -- Already holding with this hand
            end
        end
        
        -- Check if entity is held by the other hand
        local otherHandName = handName == "left" and "right" or "left"
        local otherController = PhysgunControllers[otherHandName]
        
        for k = 1, otherController.pickupCount do
            if otherController.pickupList[k].ent == entity then
                -- Entity is held by other hand, release it first
                drop(otherHandName, steamid)
                break
            end
        end
        
        -- Get physics object
        local phys = entity:GetPhysicsObject()
        
        -- Activate physics and add to controller
        phys:Wake()
        controller.pickupCount = controller.pickupCount + 1
        controller.controller:AddToMotionController(phys)
        
        -- Calculate local position and angle relative to hand
        local entityPos = entity:GetPos()
        local entityAng = entity:GetAngles()
        local localPos, localAng = WorldToLocal(entityPos, entityAng, handPos, handAng)
        
        -- Store pickup info
        controller.pickupList[index] = {
            ent = entity,
            phys = phys,
            handName = handName,
            localPos = localPos,
            localAng = localAng,
            collisionGroup = entity:GetCollisionGroup(),
            steamid = steamid,
            ply = ply
        }
        
        -- Set up global table for held items
        g_VR[steamid] = g_VR[steamid] or {}
        g_VR[steamid].heldItems = g_VR[steamid].heldItems or {}
        g_VR[steamid].heldItems[handName == "left" and 1 or 2] = controller.pickupList[index]
        
        -- Store reference on entity
        entity.vrmod_pickup_info = controller.pickupList[index]
        
        -- Set collision group to prevent player collision
        entity:SetCollisionGroup(COLLISION_GROUP_PASSABLE_DOOR)
        
        -- Emit pickup sound
        ply:EmitSound("physics/metal/metal_canister_impact_soft" .. math.random(1, 3) .. ".wav")
        
        -- Send pickup info to clients
        net.Start("vrmod_pickup")
            net.WriteEntity(ply)
            net.WriteEntity(entity)
            net.WriteBool(false) -- not drop
            net.WriteBool(handName == "left") -- isLeft
            net.WriteVector(localPos)
            net.WriteAngle(localAng)
        net.Broadcast()
    end
    
    -- Network receive function for pickup/drop actions
    vrmod.NetReceiveLimited("vrmod_pickup", 10, 400, function(len, ply)
        local bLeftHand = net.ReadBool()
        local bDrop = net.ReadBool()
        local handName = bLeftHand and "left" or "right"
        
        if not bDrop then
            pickup(handName, ply, net.ReadVector(), net.ReadAngle())
        else
            drop(handName, ply:SteamID(), net.ReadVector(), net.ReadAngle(), net.ReadVector(), net.ReadVector())
        end
    end)
    
    -- Block default GMod pickup for VR players
    hook.Add("AllowPlayerPickup", "vrmod_block_default_pickup", function(ply)
        if g_VR[ply:SteamID()] ~= nil then
            return false
        end
    end)
end

-- Input handling for VR pickup
hook.Add("VRMod_Input", "vrmod_physgun_input", function(action, pressed)
    if action == "boolean_left_pickup" then
        vrmod.Pickup(true, not pressed)
    elseif action == "boolean_right_pickup" then
        vrmod.Pickup(false, not pressed)
    end
end)