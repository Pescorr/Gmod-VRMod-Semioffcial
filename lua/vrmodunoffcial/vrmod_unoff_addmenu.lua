-- --------[vrmod_unoff_addmenu.lua]Start--------
if SERVER then return end
local convars, convarValues = vrmod.GetConvars()
local menutype1 = CreateClientConVar("vrmod_menu_type", 1, true, FCVAR_ARCHIVE, "1 = type1 0 = type2", 0, 1)

hook.Add(
	"VRMod_Menu",
	"addsettings",
	function(frame)
		if not menutype1:GetBool() then return end
		local sheet = vgui.Create("DPropertySheet", frame.DPropertySheet)
		frame.DPropertySheet:AddSheet("Settings02", sheet)
		sheet:Dock(FILL)
		local scrollPanel = vgui.Create("DScrollPanel", sheet)
		sheet:AddSheet("VR  ", scrollPanel, "icon16/basket.png")
		local gameplaySettings = vgui.Create("DPanel", scrollPanel)
		gameplaySettings:Dock(TOP)
		gameplaySettings:SetPaintBackground(false)
		gameplaySettings:DockPadding(10, 10, 10, 10)
		local function AddControl(control)
			control:Dock(TOP)
			control:DockMargin(0, 0, 0, 5)
			gameplaySettings:SetTall(gameplaySettings:GetTall() + control:GetTall() + 5)
		end
		local jumpduck = vgui.Create("DCheckBoxLabel", gameplaySettings)
		jumpduck:SetText("[Jumpkey Auto Duck]\nON => Jumpkey = IN_DUCK + IN_JUMP\nOFF => Jumpkey = IN_JUMP")
		jumpduck:SetConVar("vrmod_autojumpduck")
		AddControl(jumpduck)
		local teleport = vgui.Create("DCheckBoxLabel", gameplaySettings)
		teleport:SetText("[Teleport Enable]")
		teleport:SetConVar("vrmod_allow_teleport_client")
		AddControl(teleport)
		local flashlightattach = vgui.Create("DNumSlider", gameplaySettings)
		flashlightattach:SetText("[Flashlight Attachment]\n0 = Right Hand 1 = Left Hand\n 2 = HMD")
		flashlightattach:SetMin(0)
		flashlightattach:SetMax(2)
		flashlightattach:SetDecimals(0)
		flashlightattach:SetConVar("vrmod_flashlight_attachment")
		flashlightattach:SetTooltip("0 = Right Hand, 1 = Left Hand, 2 = HMD")
		AddControl(flashlightattach)
		local laserpointer = vgui.Create("DButton", gameplaySettings)
		laserpointer:SetText("Toggle Laser Pointer")
		laserpointer.DoClick = function()
			RunConsoleCommand("vrmod_togglelaserpointer")
		end
		AddControl(laserpointer)
		local weaponconfig = vgui.Create("DButton", gameplaySettings)
		weaponconfig:SetText("Weapon Viewmodel Setting")
		weaponconfig.DoClick = function()
			RunConsoleCommand("vrmod_weaponconfig")
		end
		AddControl(weaponconfig)
		local pickupweight = vgui.Create("DNumSlider", gameplaySettings)
		pickupweight:SetText("Pickup Weight (Server)")
		pickupweight:SetMin(0)
		pickupweight:SetMax(1000)
		pickupweight:SetDecimals(0)
		pickupweight:SetConVar("vrmod_pickup_weight")
		AddControl(pickupweight)
		local pickuprange = vgui.Create("DNumSlider", gameplaySettings)
		pickuprange:SetText("Pickup Range (Server)")
		pickuprange:SetMin(0)
		pickuprange:SetMax(5)
		pickuprange:SetDecimals(2)
		pickuprange:SetConVar("vrmod_pickup_range")
		AddControl(pickuprange)
		local pickuplimit = vgui.Create("DNumSlider", gameplaySettings)
		pickuplimit:SetText("Pickup Limit (Server)")
		pickuplimit:SetMin(0)
		pickuplimit:SetMax(3)
		pickuplimit:SetDecimals(0)
		pickuplimit:SetConVar("vrmod_pickup_limit")
		AddControl(pickuplimit)
		if GetConVar("vrmod_manualpickups") ~= nil then
			local manualpickups = vgui.Create("DCheckBoxLabel", gameplaySettings)
			manualpickups:SetText("Manual Pickup (by Hugo)")
			manualpickups:SetConVar("vrmod_manualpickups")
			AddControl(manualpickups)
		end
		local GamePlay_defaultbutton = vgui.Create("DButton", gameplaySettings)
		GamePlay_defaultbutton:SetText("Restore Default Gameplay Settings")
		GamePlay_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_autojumpduck", "1")
			RunConsoleCommand("vrmod_allow_teleport_client", "1")
			RunConsoleCommand("vrmod_flashlight_attachment", "0")
			RunConsoleCommand("vrmod_pickup_weight", "100")
			RunConsoleCommand("vrmod_pickup_range", "1.1")
			RunConsoleCommand("vrmod_pickup_limit", "1")
			RunConsoleCommand("vrmod_manualpickups", "1")
		end
		AddControl(GamePlay_defaultbutton)
		local scrollPanel = vgui.Create("DScrollPanel", sheet)
		sheet:AddSheet("Character", scrollPanel, "icon16/user.png")
		local vrSettings = vgui.Create("DPanel", scrollPanel)
		vrSettings:Dock(TOP)
		vrSettings:SetPaintBackground(false)
		vrSettings:DockPadding(10, 10, 10, 10)
		local function AddControl(control)
			control:Dock(TOP)
			control:DockMargin(0, 0, 0, 5)
			vrSettings:SetTall(vrSettings:GetTall() + control:GetTall() + 5)
		end
		local characterScale = vgui.Create("DPanel", vrSettings)
		characterScale:Dock(TOP)
		characterScale:SetTall(22)
		AddControl(characterScale)
		local scaleLabel = vgui.Create("DLabel", characterScale)
		scaleLabel:Dock(LEFT)
		scaleLabel:SetText(convars.vrmod_scale:GetFloat())
		scaleLabel:SetWidth(50)
		local scaleUpButton = vgui.Create("DButton", characterScale)
		scaleUpButton:Dock(RIGHT)
		scaleUpButton:SetText("+")
		scaleUpButton:SetWidth(50)
		scaleUpButton.DoClick = function()
			g_VR.scale = g_VR.scale + 0.5
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		scaleUpButton.DoRightClick = function()
			g_VR.scale = g_VR.scale + 1.0
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		local scaleDownButton = vgui.Create("DButton", characterScale)
		scaleDownButton:Dock(RIGHT)
		scaleDownButton:SetText("-")
		scaleDownButton:SetWidth(50)
		scaleDownButton.DoClick = function()
			g_VR.scale = g_VR.scale - 0.5
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		scaleDownButton.DoRightClick = function()
			g_VR.scale = g_VR.scale - 1.0
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		local eyeheight = vgui.Create("DNumSlider", vrSettings)
		eyeheight:SetText("Character Eye Height")
		eyeheight:SetMin(0)
		eyeheight:SetMax(100)
		eyeheight:SetDecimals(2)
		eyeheight:SetConVar("vrmod_characterEyeHeight")
		AddControl(eyeheight)
		local crouchthreshold = vgui.Create("DNumSlider", vrSettings)
		crouchthreshold:SetText("Crouch Threshold")
		crouchthreshold:SetMin(0)
		crouchthreshold:SetMax(100)
		crouchthreshold:SetDecimals(2)
		crouchthreshold:SetConVar("vrmod_crouchthreshold")
		AddControl(crouchthreshold)
		local headtohmd = vgui.Create("DNumSlider", vrSettings)
		headtohmd:SetText("Character Head to HMD Distance")
		headtohmd:SetMin(-20)
		headtohmd:SetMax(20)
		headtohmd:SetDecimals(2)
		headtohmd:SetConVar("vrmod_characterHeadToHmdDist")
		AddControl(headtohmd)
		local znear = vgui.Create("DNumSlider", vrSettings)
		znear:SetText("Z Near")
		znear:SetMin(0)
		znear:SetMax(20)
		znear:SetDecimals(2)
		znear:SetConVar("vrmod_znear")
		znear:SetTooltip("Objects closer than this will become transparent. Increase if you see parts of your head.")
		AddControl(znear)
		local seatedmode = vgui.Create("DCheckBoxLabel", vrSettings)
		seatedmode:SetText("Enable Seated Mode")
		seatedmode:SetConVar("vrmod_seated")
		AddControl(seatedmode)
		local seatedoffset = vgui.Create("DNumSlider", vrSettings)
		seatedoffset:SetText("Seated Offset")
		seatedoffset:SetMin(-100)
		seatedoffset:SetMax(100)
		seatedoffset:SetDecimals(2)
		seatedoffset:SetConVar("vrmod_seatedoffset")
		AddControl(seatedoffset)
		local althead = vgui.Create("DCheckBoxLabel", vrSettings)
		althead:SetText("Alternative Character Yaw")
		althead:SetConVar("vrmod_oldcharacteryaw")
		AddControl(althead)
		local animationenable = vgui.Create("DCheckBoxLabel", vrSettings)
		animationenable:SetText("Character Animation Enable (Client)")
		animationenable:SetConVar("vrmod_animation_Enable")
		AddControl(animationenable)
		local lefthand = vgui.Create("DCheckBoxLabel", vrSettings)
		lefthand:SetText("Left Hand (WIP)")
		lefthand:SetConVar("vrmod_LeftHand")
		AddControl(lefthand)
		local lefthandfire = vgui.Create("DCheckBoxLabel", vrSettings)
		lefthandfire:SetText("Left Hand Fire (WIP)")
		lefthandfire:SetConVar("vrmod_lefthandleftfire")
		AddControl(lefthandfire)
		local lefthandhold = vgui.Create("DCheckBoxLabel", vrSettings)
		lefthandhold:SetText("Left Hand Hold Mode (WIP)")
		lefthandhold:SetConVar("vrmod_LeftHandmode")
		AddControl(lefthandhold)
		local togglemirror = vgui.Create("DButton", vrSettings)
		togglemirror:SetText("Toggle Mirror")
		togglemirror.DoClick = function()
			if GetConVar("vrmod_heightmenu"):GetBool() then
				VRUtilMenuClose("heightmenu")
				convars.vrmod_heightmenu:SetBool(false)
			else
				VRUtilOpenHeightMenu()
				convars.vrmod_heightmenu:SetBool(true)
			end
		end
		AddControl(togglemirror)
		local applybutton = vgui.Create("DButton", vrSettings)
		applybutton:SetText("Apply VR Settings (Requires VRMod Restart)")
		applybutton.DoClick = function()
			RunConsoleCommand("vrmod_restart")
		end
		AddControl(applybutton)
		local autoadjust = vgui.Create("DButton", vrSettings)
		autoadjust:SetText("Auto Adjust VR Settings (Requires VRMod Restart)")
		autoadjust.DoClick = function()
			RunConsoleCommand("vrmod_character_auto")
			timer.Simple(
				2,
				function()
					RunConsoleCommand("vrmod_scale_auto")
				end
			)
			timer.Simple(
				1,
				function()
					RunConsoleCommand("vrmod_restart")
				end
			)
		end
		AddControl(autoadjust)
		local vrdefault = vgui.Create("DButton", vrSettings)
		vrdefault:SetText("Restore Default VR Settings")
		vrdefault.DoClick = function()
			RunConsoleCommand("vrmod_character_reset")
		end
		AddControl(vrdefault)
		local uiSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("UI  ", uiSettings, "icon16/photos.png")
		uiSettings:DockPadding(0, 0, 0, 0)
		local hudenable = uiSettings:CheckBox("HUD Enable")
		hudenable:SetConVar("vrmod_hud")
		local hudcurve = uiSettings:NumSlider("HUD Curve", "vrmod_hudcurve", 1, 100, 0)
		local huddistance = uiSettings:NumSlider("HUD Distance", "vrmod_huddistance", 1, 200, 0)
		local hudscale = uiSettings:NumSlider("HUD Scale", "vrmod_hudscale", 0.01, 0.20, 2)
		local hudalpha = uiSettings:NumSlider("HUD Alpha", "vrmod_hudtestalpha", 0, 255, 0)
		local hudonlykey = uiSettings:CheckBox("HUD Only While Pressing Menu Key")
		hudonlykey:SetConVar("vrmod_hud_visible_quickmenukey")
		local quickmenuattach = uiSettings:ComboBox("Quickmenu Attach Position", "vrmod_attach_quickmenu")
		quickmenuattach:AddChoice("Left Hand", "1")
		quickmenuattach:AddChoice("Right Hand", "4")
		quickmenuattach:AddChoice("HMD", "3")
		local weaponmenuattach = uiSettings:ComboBox("Weapon Menu Attach Position", "vrmod_attach_weaponmenu")
		weaponmenuattach:AddChoice("Left Hand", "1")
		weaponmenuattach:AddChoice("Right Hand", "4")
		weaponmenuattach:AddChoice("HMD", "3")
		local popupattach = uiSettings:ComboBox("Popup Window Attach Position", "vrmod_attach_popup")
		popupattach:AddChoice("Left Hand", "1")
		popupattach:AddChoice("Right Hand", "4")
		popupattach:AddChoice("HMD", "3")
		local menuoutline = uiSettings:CheckBox("Menu & UI Red Outline")
		menuoutline:SetConVar("vrmod_ui_outline")
		local uirender = uiSettings:CheckBox("UI Render Alternative")
		uirender:SetConVar("vrmod_ui_realtime")
		local cameraoverride = uiSettings:CheckBox("Desktop Camera Override")
		cameraoverride:SetTooltip("OFF: If using a camera mod, the GMod window will show the camera view")
		cameraoverride:SetConVar("vrmod_cameraoverride")
		local keyboarduichat = uiSettings:CheckBox("Keyboard UI Chat Key")
		keyboarduichat:SetConVar("vrmod_keyboard_uichatkey")
		local VRElefthand = uiSettings:CheckBox("VRE Attach Left Hands")
		VRElefthand:SetConVar("vre_ui_attachtohand")
		local uidefault = uiSettings:Button("Restore Default UI Settings")
		uidefault.DoClick = function()
			RunConsoleCommand("vrmod_hud", "1")
			RunConsoleCommand("vrmod_hudcurve", "60")
			RunConsoleCommand("vrmod_huddistance", "60")
			RunConsoleCommand("vrmod_hudscale", "0.05")
			RunConsoleCommand("vrmod_hudtestalpha", "0")
			RunConsoleCommand("vrmod_hud_visible_quickmenukey", "0")
			RunConsoleCommand("vrmod_attach_quickmenu", "4")
			RunConsoleCommand("vrmod_attach_weaponmenu", "3")
			RunConsoleCommand("vrmod_attach_popup", "4")
			RunConsoleCommand("vre_ui_attachtohand", "1")
			RunConsoleCommand("vrmod_ui_outline", "1")
			RunConsoleCommand("vrmod_ui_realtime", "0")
			RunConsoleCommand("vrmod_cameraoverride", "1")
			RunConsoleCommand("vrmod_keyboard_uichatkey", "1")
		end

		-- Hand HUDs Settings Tab
		local handHudsScrollPanel = vgui.Create("DScrollPanel", sheet)
		sheet:AddSheet("Hand HUDs", handHudsScrollPanel, "icon16/monitor_edit.png")
		local handHudsForm = vgui.Create("DForm", handHudsScrollPanel) -- DForm自体はコンテナとして使用
		handHudsForm:Dock(FILL)
		handHudsForm:SetPadding(5)

		local HandHUDsData = { Left = {}, Right = {} }
		HandHUDsData.Left.menuLabel = "Left Hand HUD"
		HandHUDsData.Left.id_prefix = "vrmod_left_hud"
		HandHUDsData.Right.menuLabel = "Right Hand HUD"
		HandHUDsData.Right.id_prefix = "vrmod_right_hud"

		for handKey, hudSettingsData in pairs(HandHUDsData) do
			local collapsibleCategory = vgui.Create("DCollapsibleCategory", handHudsForm) -- DCollapsibleCategoryを直接作成
			collapsibleCategory:SetLabel(hudSettingsData.menuLabel)
			collapsibleCategory:SetExpanded(true)
			handHudsForm:AddItem(collapsibleCategory) -- DFormにDCollapsibleCategoryを追加

			local categoryContents = vgui.Create("DForm", collapsibleCategory) -- DCollapsibleCategory内にDFormを作成してコントロールを追加
			categoryContents:Dock(TOP)
			categoryContents:SetPadding(5)


			categoryContents:CheckBox("Enable " .. hudSettingsData.menuLabel, hudSettingsData.id_prefix .. "_enabled")
			categoryContents:NumSlider("Scale", hudSettingsData.id_prefix .. "_scale", 0.001, 0.1, 3)

			categoryContents:NumSlider("Offset Pos X", hudSettingsData.id_prefix .. "_offset_pos_x", -50, 50, 2)
			categoryContents:NumSlider("Offset Pos Y", hudSettingsData.id_prefix .. "_offset_pos_y", -50, 50, 2)
			categoryContents:NumSlider("Offset Pos Z", hudSettingsData.id_prefix .. "_offset_pos_z", -50, 50, 2)

			categoryContents:NumSlider("Offset Ang Pitch", hudSettingsData.id_prefix .. "_offset_ang_p", -360, 360, 1)
			categoryContents:NumSlider("Offset Ang Yaw", hudSettingsData.id_prefix .. "_offset_ang_y", -360, 360, 1)
			categoryContents:NumSlider("Offset Ang Roll", hudSettingsData.id_prefix .. "_offset_ang_r", -360, 360, 1)

			categoryContents:NumSlider("UV Offset X", hudSettingsData.id_prefix .. "_uv_offset_x", 0, 1, 2)
			categoryContents:NumSlider("UV Offset Y", hudSettingsData.id_prefix .. "_uv_offset_y", 0, 1, 2)
			categoryContents:NumSlider("UV Scale X", hudSettingsData.id_prefix .. "_uv_scale_x", 0.01, 1, 2)
			categoryContents:NumSlider("UV Scale Y", hudSettingsData.id_prefix .. "_uv_scale_y", 0.01, 1, 2)

			categoryContents:TextEntry(hudSettingsData.menuLabel .. " Blacklist (comma separated)", hudSettingsData.id_prefix .. "_blacklist")
			categoryContents:NumSlider(hudSettingsData.menuLabel .. " Background Alpha", hudSettingsData.id_prefix .. "_alpha", 0, 255, 0)

			local restoreDefaultsButton = categoryContents:Button("Restore Defaults for " .. hudSettingsData.menuLabel)
			restoreDefaultsButton.DoClick = function()
				RunConsoleCommand(hudSettingsData.id_prefix .. "_enabled", "1")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_scale", "0.009")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_offset_pos_x", (handKey == "Right" and "-6.78" or "0.70"))
				RunConsoleCommand(hudSettingsData.id_prefix .. "_offset_pos_y", (handKey == "Right" and "0.70" or "-2.10"))
				RunConsoleCommand(hudSettingsData.id_prefix .. "_offset_pos_z", (handKey == "Right" and "-0.70" or "-1.50"))
				RunConsoleCommand(hudSettingsData.id_prefix .. "_offset_ang_p", (handKey == "Right" and "165" or "185"))
				RunConsoleCommand(hudSettingsData.id_prefix .. "_offset_ang_y", (handKey == "Right" and "-180" or "0"))
				RunConsoleCommand(hudSettingsData.id_prefix .. "_offset_ang_r", "-90")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_uv_offset_x", (handKey == "Right" and "0.73" or "0.5"))
				RunConsoleCommand(hudSettingsData.id_prefix .. "_uv_offset_y", "0.73")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_uv_scale_x", "0.63")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_uv_scale_y", "0.47")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_blacklist", "")
				RunConsoleCommand(hudSettingsData.id_prefix .. "_alpha", "0")
			end
		end

		local graphicsSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Optimize", graphicsSettings, "icon16/picture.png")
		graphicsSettings:DockPadding(0, 0, 0, 0)
		local skybox = graphicsSettings:CheckBox("Skybox Enable (Client)")
		skybox:SetConVar("r_3dsky")
		local shadows = graphicsSettings:CheckBox("Shadows & Flashlights Effect Enable (Client)")
		shadows:SetConVar("r_shadows")
		local farz = graphicsSettings:NumSlider("Visible Range of Map", "r_farz", 0, 16384, 0)
		farz:SetTooltip("sv_cheats 1 is required")
		local optimizationLevel = graphicsSettings:NumSlider("VRMod Optimization Level", "vrmod_gmod_optimization", 0, 4, 0)
		optimizationLevel:SetTooltip("0: No optimization\n1: Basic optimization\n2: Medium optimization\n3: Strong optimization (may affect visual quality)\n3: Extreme optimization (Eye Flash WARNING)")
		local optimizationDescription = graphicsSettings:Help("Optimization Levels:\n" .. "0: No optimization applied\n" .. "1: Basic - Disables gmod_mcore_test\n" .. "2: Medium - Disables water reflections and refractions\n" .. "3: Strong - Applies mirror optimizations and disables reflective surfaces\n" .. "4: Extreme - gmod_mcore_test Enable (!!Eye Flash WARNING!!)")
		optimizationDescription:SetAutoStretchVertical(true)
		local showOptTabs = graphicsSettings:CheckBox("Show Manual Optimization Tabs")
		showOptTabs:SetConVar("vrmod_showmanualoptimizationtabs")
		local showoptimizationtabs = CreateClientConVar("vrmod_showmanualoptimizationtabs", "0", true, FCVAR_ARCHIVE, "Show optimization tabs in VR settings menu")
		local MenuTab11 = nil
		if showoptimizationtabs:GetBool() then
			MenuTab11 = vgui.Create("DPanel", sheet)
			sheet:AddSheet("Opt.VR", MenuTab11, "icon16/cog_add.png")
			MenuTab11.Paint = function(self, w, h) end
			local scroll = vgui.Create("DScrollPanel", MenuTab11)
			scroll:Dock(FILL)
			local optimizeconvar = {{"r_WaterDrawReflection", 0, 1, "Draw water reflections", 1}, {"r_WaterDrawRefraction", 0, 1, "Draw water refractions", 1}, {"r_waterforceexpensive", 0, 1, "Force expensive water", 0}, {"r_waterforcereflectentities", 0, 1, "Force water to reflect entities", 0}, {"vrmod_mirror_optimization", 0, 1, "Optimize VR mirrors", 0}, {"vrmod_reflective_glass_toggle", 0, 1, "Toggle reflective glass", 0}, {"vrmod_disable_mirrors", 0, 1, "Disable mirrors", 0}, {"gmod_mcore_test", 0, 1, "Enable multi-core rendering", 1}}
			local changedValues = {}
			for i, convar_item in ipairs(optimizeconvar) do -- Renamed 'convar' to 'convar_item' to avoid conflict
				local name, min, max, description, default = unpack(convar_item)
				local panel = vgui.Create("DPanel", scroll)
				panel:Dock(TOP)
				panel:SetHeight(70)
				panel:DockMargin(0, 0, 0, 10)
				local label = vgui.Create("DLabel", panel)
				label:SetText(description)
				label:Dock(TOP)
				local slider = vgui.Create("DNumSlider", panel)
				slider:Dock(TOP)
				slider:SetText(name)
				slider:SetMin(min)
				slider:SetMax(max)
				slider:SetDecimals(0)
				local valueLabel = vgui.Create("DLabel", panel)
				valueLabel:Dock(LEFT)
				valueLabel:SetWidth(50)
				local defaultButton = vgui.Create("DButton", panel)
				defaultButton:Dock(RIGHT)
				defaultButton:SetText("Default")
				defaultButton:SetWidth(60)
				slider.OnValueChanged = function(self, value)
					changedValues[name] = math.Round(value)
					valueLabel:SetText(tostring(math.Round(value)))
				end
				local currentValue = GetConVar(name):GetInt()
				slider:SetValue(currentValue)
				valueLabel:SetText(tostring(currentValue))
				defaultButton.DoClick = function()
					slider:SetValue(default)
					changedValues[name] = default
				end
			end
			local applyButton = vgui.Create("DButton", MenuTab11)
			applyButton:Dock(BOTTOM)
			applyButton:SetText("Apply")
			applyButton:SetHeight(30)
			applyButton.DoClick = function()
				for name, value in pairs(changedValues) do
					RunConsoleCommand(name, tostring(value))
				end
				changedValues = {}
			end
		end
		local MenuTab12 = nil
		if showoptimizationtabs:GetBool() then
			MenuTab12 = vgui.Create("DPanel", sheet)
			sheet:AddSheet("Opt.Gmod", MenuTab12, "icon16/cog_add.png")
			MenuTab12.Paint = function(self, w, h) end
			local scroll = vgui.Create("DScrollPanel", MenuTab12)
			scroll:Dock(FILL)
			local optimizeconvar2 = {{"r_shadowmaxrendered", 1, 32, "Maximum number of shadows rendered", 32}, {"r_flashlightdepthres", 1, 1024, "Flashlight shadow map resolution", 512}, {"mat_picmip", -10, 20, "Texture quality (lower is better)", 0}, {"r_lod", -1, 10, "Level of detail", 0}, {"r_rootlod", -1, 10, "Root level of detail", 0}, {"ai_expression_frametime", 0.1, 2, "AI expression update frequency", 0.5}, {"cl_detaildist", 1, 8000, "Distance at which details are visible", 1200}, {"mat_fastspecular", 0, 1, "Distance at which details are visible", 1}, {"mat_wateroverlaysize", 2, 1200, "Distance at which details are visible", 256}, {"r_drawdetailprops", 0, 2, "Draw detail props", 1}}
			local changedValues = {}
			for i, convar_item in ipairs(optimizeconvar2) do -- Renamed 'convar' to 'convar_item'
				local name, min, max, description, default = unpack(convar_item)
				local panel = vgui.Create("DPanel", scroll)
				panel:Dock(TOP)
				panel:SetHeight(70)
				panel:DockMargin(0, 0, 0, 10)
				local label = vgui.Create("DLabel", panel)
				label:SetText(description)
				label:Dock(TOP)
				local slider = vgui.Create("DNumSlider", panel)
				slider:Dock(TOP)
				slider:SetText(name)
				slider:SetMin(min)
				slider:SetMax(max)
				slider:SetDecimals(2)
				local valueLabel = vgui.Create("DLabel", panel)
				valueLabel:Dock(LEFT)
				valueLabel:SetWidth(50)
				local defaultButton = vgui.Create("DButton", panel)
				defaultButton:Dock(RIGHT)
				defaultButton:SetText("Default")
				defaultButton:SetWidth(60)
				slider.OnValueChanged = function(self, value)
					changedValues[name] = value
					valueLabel:SetText(string.format("%.2f", value))
				end
				local currentValue = GetConVar(name):GetFloat()
				slider:SetValue(currentValue)
				valueLabel:SetText(string.format("%.2f", currentValue))
				defaultButton.DoClick = function()
					slider:SetValue(default)
					changedValues[name] = default
				end
			end
			local applyButton = vgui.Create("DButton", MenuTab12)
			applyButton:Dock(BOTTOM)
			applyButton:SetText("Apply")
			applyButton:SetHeight(30)
			applyButton.DoClick = function()
				for name, value in pairs(changedValues) do
					RunConsoleCommand(name, tostring(value))
				end
				changedValues = {}
			end
		end
		local leftColumn2 = vgui.Create("DPanel", uiSettings)
		leftColumn2:SetSize(200, 400)
		leftColumn2:Dock(LEFT)
		local rightColumn2 = vgui.Create("DPanel", uiSettings)
		rightColumn2:SetSize(200, 400)
		rightColumn2:Dock(RIGHT)
		leftColumn2:Add(VRElefthand)
		leftColumn2:Add(menuoutline)
		leftColumn2:Add(hudonlykey)
		leftColumn2:Add(keyboarduichat)
		rightColumn2:Add(cameraoverride)
		rightColumn2:Add(uirender)
		rightColumn2:Add(uidefault)
		local quickMenuSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Quick Menu", quickMenuSettings, "icon16/application_view_tile.png")
		quickMenuSettings:DockPadding(0, 0, 0, 0)
		local mapbrowser = quickMenuSettings:CheckBox("Map Browser")
		mapbrowser:SetConVar("vrmod_quickmenu_mapbrowser_enable")
		local vrexit = quickMenuSettings:CheckBox("VR Exit")
		vrexit:SetConVar("vrmod_quickmenu_exit")
		local uireset = quickMenuSettings:CheckBox("UI Reset")
		uireset:SetConVar("vrmod_quickmenu_vgui_reset_menu")
		local gbradial = quickMenuSettings:CheckBox("VRE GBRadial & Add Menu")
		gbradial:SetConVar("vrmod_quickmenu_vre_gbradial_menu")
		local chat = quickMenuSettings:CheckBox("Chat")
		chat:SetConVar("vrmod_quickmenu_chat")
		local seatedmenu = quickMenuSettings:CheckBox("Seated Mode")
		seatedmenu:SetConVar("vrmod_quickmenu_seated_menu")
		local mirrortoggle = quickMenuSettings:CheckBox("Toggle Mirror")
		mirrortoggle:SetConVar("vrmod_quickmenu_togglemirror")
		local spawnmenu = quickMenuSettings:CheckBox("Spawn Menu")
		spawnmenu:SetConVar("vrmod_quickmenu_spawn_menu")
		local noclip = quickMenuSettings:CheckBox("No Clip")
		noclip:SetConVar("vrmod_quickmenu_noclip")
		local contextmenu = quickMenuSettings:CheckBox("Context Menu")
		contextmenu:SetConVar("vrmod_quickmenu_context_menu")
		local arccw = quickMenuSettings:CheckBox("ArcCW Customize")
		arccw:SetConVar("vrmod_quickmenu_arccw")
		local vehiclemode = quickMenuSettings:CheckBox("Toggle Vehicle Mode")
		vehiclemode:SetConVar("vrmod_quickmenu_togglevehiclemode")
		local quickmenudefault = quickMenuSettings:Button("Restore Default Quick Menu Settings")
		quickmenudefault.DoClick = function()
			RunConsoleCommand("vrmod_quickmenu_mapbrowser_enable", "1")
			RunConsoleCommand("vrmod_quickmenu_exit", "1")
			RunConsoleCommand("vrmod_quickmenu_vgui_reset_menu", "0")
			RunConsoleCommand("vrmod_quickmenu_vre_gbradial_menu", "1")
			RunConsoleCommand("vrmod_quickmenu_chat", "1")
			RunConsoleCommand("vrmod_quickmenu_seated_menu", "1")
			RunConsoleCommand("vrmod_quickmenu_togglemirror", "1")
			RunConsoleCommand("vrmod_quickmenu_spawn_menu", "1")
			RunConsoleCommand("vrmod_quickmenu_noclip", "1")
			RunConsoleCommand("vrmod_quickmenu_context_menu", "1")
			RunConsoleCommand("vrmod_quickmenu_arccw", "0")
			RunConsoleCommand("vrmod_quickmenu_togglevehiclemode", "1")
		end
		local PanelEMSTOP = vgui.Create("DPanel", sheet)
		sheet:AddSheet("VRStop Key", PanelEMSTOP, "icon16/stop.png")
		PanelEMSTOP.Paint = function(self, w, h) end
		local emergStopKeyBinder = vgui.Create("DBinder", PanelEMSTOP)
		emergStopKeyBinder:SetPos(20, 20)
		emergStopKeyBinder:SetSize(300, 20)
		emergStopKeyBinder:SetConVar("vrmod_emergencystop_key")
		local emergStopHoldTime = vgui.Create("DNumSlider", PanelEMSTOP)
		emergStopHoldTime:SetPos(20, 50)
		emergStopHoldTime:SetSize(330, 30)
		emergStopHoldTime:SetText("Hold Time for \n Emergency Stop (Seconds)")
		emergStopHoldTime:SetMin(0.0)
		emergStopHoldTime:SetMax(10.0)
		emergStopHoldTime:SetDecimals(2)
		emergStopHoldTime:SetConVar("vrmod_emergencystop_time")
		local generalSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Misc", generalSettings, "icon16/cog.png")
		generalSettings:DockPadding(0, 0, 0, 0)
		local showonstartup = generalSettings:CheckBox("VRMod Menu Show on Startup")
		showonstartup:SetConVar("vrmod_showonstartup")
		local errorcheck = generalSettings:CheckBox("Error Check Method")
		errorcheck:SetConVar("vrmod_error_check_method")
		local errorlock = generalSettings:CheckBox("ModuleError VRMod Menu Lock")
		errorlock:SetConVar("vrmod_error_hard")
		local pmchange = generalSettings:CheckBox("Player Model Change (forPAC3)")
		pmchange:SetConVar("vrmod_pmchange")
		local vrdisablepickup = generalSettings:CheckBox("VR Disable Pickup (Client)")
		vrdisablepickup:SetConVar("vr_pickup_disable_client")
		local lvspickuphandle = generalSettings:CheckBox("Enable LVS Pickup Handle")
		lvspickuphandle:SetConVar("vrmod_lvs_pickup_handle")
		local vrmodmenutype = generalSettings:CheckBox("VRMod Menu Type")
		vrmodmenutype:SetConVar("vrmod_menu_type")
		local animationSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Animation", animationSettings, "icon16/user_edit.png")
		animationSettings:DockPadding(0, 0, 0, 0)
		animationSettings:TextEntry("Idle Animation", "vrmod_idle_act")
		animationSettings:TextEntry("Walk Animation", "vrmod_walk_act")
		animationSettings:TextEntry("Run Animation", "vrmod_run_act")
		animationSettings:TextEntry("Jump Animation", "vrmod_jump_act")
		local helpText = animationSettings:Help("Enter animation names (e.g., ACT_HL2MP_IDLE)")
		helpText:DockMargin(0, 10, 0, 0)
		local defaultButton = vgui.Create("DButton", animationSettings)
		defaultButton:SetText("Reset to Default")
		defaultButton:Dock(TOP)
		defaultButton:DockMargin(0, 10, 0, 0)
		defaultButton.DoClick = function()
			RunConsoleCommand("vrmod_idle_act", "ACT_HL2MP_IDLE")
			RunConsoleCommand("vrmod_walk_act", "ACT_HL2MP_WALK")
			RunConsoleCommand("vrmod_run_act", "ACT_HL2MP_WALK")
			RunConsoleCommand("vrmod_jump_act", "ACT_HL2MP_WALK")
		end
		local advancedSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Graphics02", advancedSettings, "icon16/wrench.png")
		advancedSettings:DockPadding(0, 0, 0, 0)
		local autores = advancedSettings:CheckBox("Automatic Resolution Set")
		autores:SetConVar("vrmod_scr_alwaysautosetting")
		local rtwidth = advancedSettings:NumSlider("Render Target Width Multiplier", "vrmod_rtWidth_Multiplier", 0.1, 10, 1)
		local rtheight = advancedSettings:NumSlider("Render Target Height Multiplier", "vrmod_rtHeight_Multiplier", 0.1, 10, 1)
		local uiwidth = advancedSettings:NumSlider("VR UI Width", "vrmod_ScrW", 640, ScrW() * 2, 0)
		local uiheight = advancedSettings:NumSlider("VR UI Height", "vrmod_ScrH", 480, ScrH() * 2, 0)
		local hudwidth = advancedSettings:NumSlider("VR HUD Width", "vrmod_ScrW_hud", 640, ScrW() * 2, 0)
		local hudheight = advancedSettings:NumSlider("VR HUD Height", "vrmod_ScrH_hud", 480, ScrH() * 2, 0)
		local customres = advancedSettings:Button("Custom Width & Height (Quest 2 / Virtual Desktop)")
		customres.DoClick = function()
			RunConsoleCommand("vrmod_rtWidth_Multiplier", "2.5")
			RunConsoleCommand("vrmod_rtHeight_Multiplier", "1.2")
		end
		customres.DoRightClick = function()
			RunConsoleCommand("vrmod_rtWidth_Multiplier", "2.5")
			RunConsoleCommand("vrmod_rtHeight_Multiplier", "1.2")
			if g_VR.active then
				RunConsoleCommand("vrmod_ScrW_hud", g_VR.rt:Width() / 2)
				RunConsoleCommand("vrmod_ScrH_hud", g_VR.rt:Height())
			end
		end
		local advanceddefault = advancedSettings:Button("Restore Default Advanced Settings")
		advanceddefault.DoClick = function()
			RunConsoleCommand("vrmod_rtWidth_Multiplier", "2.0")
			RunConsoleCommand("vrmod_rtHeight_Multiplier", "1.0")
			RunConsoleCommand("vrmod_error_check_method", "1")
			RunConsoleCommand("vrmod_error_hard", "0")
			RunConsoleCommand("vrmod_test_ui_testver", "0")
			RunConsoleCommand("vrmod_ScrH", tostring(ScrH()))
			RunConsoleCommand("vrmod_ScrW", tostring(ScrW()))
			RunConsoleCommand("vrmod_ScrH_hud", tostring(ScrH()))
			RunConsoleCommand("vrmod_ScrW_hud", tostring(ScrW()))
			RunConsoleCommand("vrmod_scr_alwaysautosetting", "1")
			RunConsoleCommand("vrmod_restart")
		end
		local networkSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Network(Server)", networkSettings, "icon16/connect.png")
		networkSettings:DockPadding(0, 0, 0, 0)
		local netdelay = networkSettings:NumSlider("Net Delay", "vrmod_net_delay", 0, 1, 3)
		local netdelaymax = networkSettings:NumSlider("Net Delay Max", "vrmod_net_delaymax", 0, 100, 3)
		local netstoredframes = networkSettings:NumSlider("Net Stored Frames", "vrmod_net_storedframes", 1, 25, 3)
		local nettickrate = networkSettings:NumSlider("Net Tickrate", "vrmod_net_tickrate", 1, 100, 3)
		local allowteleport = networkSettings:CheckBox("Allow VR Teleport (Server)")
		allowteleport:SetConVar("vrmod_allow_teleport")
		local netdefault = networkSettings:Button("Restore Default Network Settings")
		netdefault.DoClick = function()
			RunConsoleCommand("vrmod_net_delay", "0.1")
			RunConsoleCommand("vrmod_net_delaymax", "0.2")
			RunConsoleCommand("vrmod_net_storedframes", "15")
			RunConsoleCommand("vrmod_net_tickrate", "67")
			RunConsoleCommand("vrmod_allow_teleport", "1")
		end
	end
)
hook.Add(
	"VRMod_Menu",
	"addsettings2",
	function(frame)
		if menutype1:GetBool() then return end
		local sheet = vgui.Create("DPropertySheet", frame.DPropertySheet)
		frame.DPropertySheet:AddSheet("Settings02", sheet)
		sheet:Dock(FILL)
		local MenuTab01 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("FPS", MenuTab01, "icon16/cog_add.png")
		MenuTab01.Paint = function(self, w, h) end
		local r_3dsky = MenuTab01:Add("DCheckBoxLabel")
		r_3dsky:SetPos(20, 10)
		r_3dsky:SetText("Skybox Enable(Client)")
		r_3dsky:SetConVar("r_3dsky")
		r_3dsky:SizeToContents()
		local r_shadows = MenuTab01:Add("DCheckBoxLabel")
		r_shadows:SetPos(20, 30)
		r_shadows:SetText("Shadows&FlashLights Effect Enable(Client)")
		r_shadows:SetConVar("r_shadows")
		r_shadows:SizeToContents()
		local r_farz = vgui.Create("DNumSlider", MenuTab01)
		r_farz:SetPos(20, 50)
		r_farz:SetSize(370, 25)
		r_farz:SetText("[Visible range of map] \n (sv_cheats 1 is required)")
		r_farz:SetMin(-1)
		r_farz:SetMax(16384)
		r_farz:SetDecimals(0)
		r_farz:SetConVar("r_farz")
		r_farz.OnValueChanged = function(self, value) end
		local mat_queue_mode = vgui.Create("DNumSlider", MenuTab01)
		mat_queue_mode:SetPos(20, 80)
		mat_queue_mode:SetSize(370, 120)
		mat_queue_mode:SetText("[mat_queue_mode]\n(Blindness Warning!!!)\nSetting to [2] will\nenable the multi-core \nand increase FPS\nbut it will also make your right eye\nblink more intensely, which\nwill hurt your eyes.\n[1] is recommended.")
		mat_queue_mode:SetMin(-1)
		mat_queue_mode:SetMax(2)
		mat_queue_mode:SetDecimals(0)
		mat_queue_mode:SetConVar("mat_queue_mode")
		mat_queue_mode.OnValueChanged = function(self, value) end
		local gmod_mcore_test = vgui.Create("DNumSlider", MenuTab01)
		gmod_mcore_test:SetPos(20, 180)
		gmod_mcore_test:SetSize(370, 90)
		gmod_mcore_test:SetText("[gmod_mcore_test]")
		gmod_mcore_test:SetMin(-1)
		gmod_mcore_test:SetMax(1)
		gmod_mcore_test:SetDecimals(0)
		gmod_mcore_test:SetConVar("gmod_mcore_test")
		gmod_mcore_test.OnValueChanged = function(self, value) end
		local vrmod_open_menu_auto_optimization = MenuTab01:Add("DCheckBoxLabel")
		vrmod_open_menu_auto_optimization:SetPos(20, 250)
		vrmod_open_menu_auto_optimization:SetText("[VRMenu Open -> Auto Basic Optimization]")
		vrmod_open_menu_auto_optimization:SetConVar("vrmod_gmod_optimization_auto")
		vrmod_open_menu_auto_optimization:SizeToContents()
		local showoptimizationtabs = CreateClientConVar("vrmod_showmanualoptimizationtabs", "0", true, FCVAR_ARCHIVE, "Show optimization tabs in VR settings menu")
		local showopttabs = MenuTab01:Add("DCheckBoxLabel")
		showopttabs:SetPos(20, 320)
		showopttabs:SetText("[Show Manual Optimization Tabs]")
		showopttabs:SetConVar("vrmod_showmanualoptimizationtabs")
		showopttabs:SizeToContents()
		local gmod_optimization = vgui.Create("DButton", MenuTab01)
		gmod_optimization:SetText("vrmod_gmod_optimization\n(Basic)")
		gmod_optimization:SetPos(20, 270)
		gmod_optimization:SetSize(160, 30)
		gmod_optimization.DoClick = function()
			RunConsoleCommand("vrmod_gmod_optimization")
		end
		gmod_optimization.DoRightClick = function()
			RunConsoleCommand("remove_reflective_glass")
		end
		local gmod_optimization02 = vgui.Create("DButton", MenuTab01)
		gmod_optimization02:SetText("vrmod_gmod_optimization\n(buggy but Strong)")
		gmod_optimization02:SetPos(190, 270)
		gmod_optimization02:SetSize(160, 30)
		gmod_optimization02.DoClick = function()
			RunConsoleCommand("vrmod_gmod_optimization_02")
		end
		gmod_optimization02.DoRightClick = function()
			RunConsoleCommand("vrmod_gmod_optimization_03")
		end
		local FPS_defaultbutton = vgui.Create("DButton", MenuTab01)
		FPS_defaultbutton:SetText("setdefaultvalue\n(Gmod Default)")
		FPS_defaultbutton:SetPos(190, 310)
		FPS_defaultbutton:SetSize(160, 30)
		FPS_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_gmod_optimization_reset")
		end
		FPS_defaultbutton.DoRightClick = function()
			RunConsoleCommand("vrmod_gmod_optimization_reset")
		end
		local MenuTab11 = nil
		if showoptimizationtabs:GetBool() then
			MenuTab11 = vgui.Create("DPanel", sheet)
			sheet:AddSheet("Opt.1", MenuTab11, "icon16/cog_add.png")
			MenuTab11.Paint = function(self, w, h) end
			local optimizeconvar = {{"mat_motion_blur_enabled", "0"}, {"mat_motion_blur_falling_intensity", "0"}, {"mat_motion_blur_falling_min", "0"}, {"mat_motion_blur_falling_max", "0"}, {"mat_motion_blur_rotation_intensity", "0"}, {"mat_motion_blur_strength", "0"}, {"r_WaterDrawReflection", "0"}, {"r_WaterDrawRefraction", "0"}, {"r_waterforceexpensive", "0"}, {"r_waterforcereflectentities", "0"}, {"r_drawsprites", "1"}, {"mat_alphacoverage", "0"}, {"r_maxdlights", "0.00"}, {"r_shadowmaxrendered", "0.00"}, {"gmod_mcore_test", "1"}, {"mat_specular", "1"}}
			for i, convar_item in ipairs(optimizeconvar) do -- Renamed 'convar' to 'convar_item'
				local name, value = unpack(convar_item)
				local optcheckbox = MenuTab11:Add("DCheckBoxLabel")
				optcheckbox:SetPos(20, 20 * (i - 1) + 10) -- Corrected loop variable access
				optcheckbox:SetText(name)
				optcheckbox:SetConVar(name)
				optcheckbox:SizeToContents()
			end
		end
		local MenuTab12 = nil
		if showoptimizationtabs:GetBool() then
			MenuTab12 = vgui.Create("DPanel", sheet)
			sheet:AddSheet("Opt.2", MenuTab12, "icon16/cog_add.png")
			MenuTab12.Paint = function(self, w, h) end
			local optimizeconvar2 = {{"r_projectedtexture_filter", "0"}, {"cl_detaildist", "500"}, {"cl_detailfade", "500"}, {"mat_use_compressed_hdr_textures", "1"}, {"r_ambientboost", "0"}, {"r_decals", "60.00"}, {"r_drawparticles", "1"}, {"g_ragdoll_maxcount", "0"}, {"gmod_physiterations", "1"}, {"ai_strong_optimizations", "1"}, {"r_radiosity", "2"}, {"ai_strong_optimizations_no_checkstand", "1"}, {"ai_expression_optimization", "1"}, {"r_flashlightdepthres", "256"}, {"spawnicon_queue", "1"}}
			for i, convar_item in ipairs(optimizeconvar2) do -- Renamed 'convar' to 'convar_item'
				local name, value = unpack(convar_item)
				local optcheckbox2 = MenuTab12:Add("DCheckBoxLabel")
				optcheckbox2:SetPos(20, 20 * (i - 1) + 10) -- Corrected loop variable access
				optcheckbox2:SetText(name)
				optcheckbox2:SetConVar(name)
				optcheckbox2:SizeToContents()
			end
		end
		local MenuTab02 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("GamePlay", MenuTab02, "icon16/joystick.png")
		MenuTab02.Paint = function(self, w, h) end
		local autojumpduck = MenuTab02:Add("DCheckBoxLabel")
		autojumpduck:SetPos(20, 10)
		autojumpduck:SetText("[Jumpkey Auto Duck]\nON => Jumpkey = IN_DUCK + IN_JUMP\nOFF => Jumpkey = IN_JUMP")
		autojumpduck:SetConVar("vrmod_autojumpduck")
		autojumpduck:SizeToContents()
		local allow_teleport_client = MenuTab02:Add("DCheckBoxLabel")
		allow_teleport_client:SetPos(20, 60)
		allow_teleport_client:SetText("Teleport Button Enable(Client)")
		allow_teleport_client:SetConVar("vrmod_allow_teleport_client")
		allow_teleport_client:SizeToContents()
		local flashlight_attachment = vgui.Create("DNumSlider", MenuTab02)
		flashlight_attachment:SetPos(20, 90)
		flashlight_attachment:SetSize(350, 25)
		flashlight_attachment:SetText("[flashlight_attachment]\n0 = Rhand1 = Lhand 2 = HMD")
		flashlight_attachment:SetMin(0)
		flashlight_attachment:SetMax(2)
		flashlight_attachment:SetDecimals(0)
		flashlight_attachment:SetConVar("vrmod_flashlight_attachment")
		flashlight_attachment.OnValueChanged = function(self, value) end
		local togglelaserpointer = vgui.Create("DButton", MenuTab02)
		togglelaserpointer:SetText("Toggle Laser Pointer")
		togglelaserpointer:SetPos(20, 130)
		togglelaserpointer:SetSize(160, 30)
		togglelaserpointer.DoClick = function()
			RunConsoleCommand("vrmod_togglelaserpointer")
		end
		togglelaserpointer.DoRightClick = function() end
		local vrmod_weaponconfig = vgui.Create("DButton", MenuTab02)
		vrmod_weaponconfig:SetText("Weapon Viewmodel Setting")
		vrmod_weaponconfig:SetPos(190, 130)
		vrmod_weaponconfig:SetSize(160, 30)
		vrmod_weaponconfig.DoClick = function()
			RunConsoleCommand("vrmod_weaponconfig")
		end
		vrmod_weaponconfig.DoRightClick = function() end -- Added DoRightClick
		local pickup_disable_client = MenuTab02:Add("DCheckBoxLabel")
		pickup_disable_client:SetPos(20, 175)
		pickup_disable_client:SetText("VR Disable Pickup(Client)")
		pickup_disable_client:SetConVar("vr_pickup_disable_client")
		pickup_disable_client:SizeToContents()
		local pickup_weight = vgui.Create("DNumSlider", MenuTab02)
		pickup_weight:SetPos(20, 200)
		pickup_weight:SetSize(370, 25)
		pickup_weight:SetText("pickup_weight(server)")
		pickup_weight:SetMin(1)
		pickup_weight:SetMax(99999)
		pickup_weight:SetDecimals(0)
		pickup_weight:SetConVar("vrmod_pickup_weight")
		pickup_weight.OnValueChanged = function(self, value) end
		local vrmod_pickup_range = vgui.Create("DNumSlider", MenuTab02)
		vrmod_pickup_range:SetPos(20, 225)
		vrmod_pickup_range:SetSize(370, 25)
		vrmod_pickup_range:SetText("pickup_range(server)")
		vrmod_pickup_range:SetMin(0.0)
		vrmod_pickup_range:SetMax(10.0)
		vrmod_pickup_range:SetDecimals(1)
		vrmod_pickup_range:SetConVar("vrmod_pickup_range")
		vrmod_pickup_range.OnValueChanged = function(self, value) end
		local vrmod_pickup_limit = vgui.Create("DNumSlider", MenuTab02)
		vrmod_pickup_limit:SetPos(20, 250)
		vrmod_pickup_limit:SetSize(370, 25)
		vrmod_pickup_limit:SetText("pickup_limit(server)")
		vrmod_pickup_limit:SetMin(0)
		vrmod_pickup_limit:SetMax(3)
		vrmod_pickup_limit:SetDecimals(0)
		vrmod_pickup_limit:SetConVar("vrmod_pickup_limit")
		vrmod_pickup_limit.OnValueChanged = function(self, value) end
		local GamePlay_defaultbutton = vgui.Create("DButton", MenuTab02)
		GamePlay_defaultbutton:SetText("setdefaultvalue")
		GamePlay_defaultbutton:SetPos(190, 310)
		GamePlay_defaultbutton:SetSize(160, 30)
		GamePlay_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_allow_teleport_client", "0")
			RunConsoleCommand("vr_pickup_disable_client", "0")
			RunConsoleCommand("vrmod_pickup_weight", "100")
			RunConsoleCommand("vrmod_pickup_range", "1.1")
			RunConsoleCommand("vrmod_pickup_limit", "1")
		end
		GamePlay_defaultbutton.DoRightClick = function() end
		local MenuTab03 = vgui.Create("DPanel", sheet)
		MenuTab03.Paint = function(self, w, h) end
		sheet:AddSheet("Quickmenu", MenuTab03, "icon16/application_view_gallery.png")
		local titleLabel = MenuTab03:Add("DLabel")
		titleLabel:SetText("Quickmenu Visible Button")
		titleLabel:SetPos(20, -3)
		titleLabel:SizeToContents()
		local vrmod_mapbrowser = MenuTab03:Add("DCheckBoxLabel")
		vrmod_mapbrowser:SetPos(20, 15)
		vrmod_mapbrowser:SetText("[Map Browser]")
		vrmod_mapbrowser:SetConVar("vrmod_quickmenu_mapbrowser_enable")
		vrmod_mapbrowser:SizeToContents()
		local vrmod_quickmenu_exit = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_exit:SetPos(20, 40)
		vrmod_quickmenu_exit:SetText("[VR EXIT]")
		vrmod_quickmenu_exit:SetConVar("vrmod_quickmenu_exit")
		vrmod_quickmenu_exit:SizeToContents()
		local vrmod_vgui_reset_menu = MenuTab03:Add("DCheckBoxLabel")
		vrmod_vgui_reset_menu:SetPos(20, 65)
		vrmod_vgui_reset_menu:SetText("[UI RESET]")
		vrmod_vgui_reset_menu:SetConVar("vrmod_quickmenu_vgui_reset_menu")
		vrmod_vgui_reset_menu:SizeToContents()
		local vrmod_quickmenu_vre_gbradial_menu = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_vre_gbradial_menu:SetPos(20, 90)
		vrmod_quickmenu_vre_gbradial_menu:SetText("[VRE gbradial] & [VRE Add menu]")
		vrmod_quickmenu_vre_gbradial_menu:SetConVar("vrmod_quickmenu_vre_gbradial_menu")
		vrmod_quickmenu_vre_gbradial_menu:SizeToContents()
		local vrmod_quickmenu_chat = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_chat:SetPos(20, 115)
		vrmod_quickmenu_chat:SetText("[Chat]")
		vrmod_quickmenu_chat:SetConVar("vrmod_quickmenu_chat")
		vrmod_quickmenu_chat:SizeToContents()
		local vrmod_quickmenu_seated_menu = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_seated_menu:SetPos(20, 140)
		vrmod_quickmenu_seated_menu:SetText("[Seated Mode]")
		vrmod_quickmenu_seated_menu:SetConVar("vrmod_quickmenu_seated_menu")
		vrmod_quickmenu_seated_menu:SizeToContents()
		local vrmod_quickmenu_togglemirror = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_togglemirror:SetPos(20, 165)
		vrmod_quickmenu_togglemirror:SetText("[Toggle Mirror]")
		vrmod_quickmenu_togglemirror:SetConVar("vrmod_quickmenu_togglemirror")
		vrmod_quickmenu_togglemirror:SizeToContents()
		local vrmod_quickmenu_spawn_menu = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_spawn_menu:SetPos(20, 190)
		vrmod_quickmenu_spawn_menu:SetText("[Spawn Menu]")
		vrmod_quickmenu_spawn_menu:SetConVar("vrmod_quickmenu_spawn_menu")
		vrmod_quickmenu_spawn_menu:SizeToContents()
		local vrmod_quickmenu_noclip = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_noclip:SetPos(20, 215)
		vrmod_quickmenu_noclip:SetText("[No Clip]")
		vrmod_quickmenu_noclip:SetConVar("vrmod_quickmenu_noclip")
		vrmod_quickmenu_noclip:SizeToContents()
		local vrmod_quickmenu_context_menu = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_context_menu:SetPos(20, 240)
		vrmod_quickmenu_context_menu:SetText("[Context Menu]")
		vrmod_quickmenu_context_menu:SetConVar("vrmod_quickmenu_context_menu")
		vrmod_quickmenu_context_menu:SizeToContents()
		local vrmod_quickmenu_arccw = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_arccw:SetPos(20, 265)
		vrmod_quickmenu_arccw:SetText("[ArcCW Customize]")
		vrmod_quickmenu_arccw:SetConVar("vrmod_quickmenu_arccw")
		vrmod_quickmenu_arccw:SizeToContents()
		local vrmod_quickmenu_vehiclemode = MenuTab03:Add("DCheckBoxLabel")
		vrmod_quickmenu_vehiclemode:SetPos(20, 290)
		vrmod_quickmenu_vehiclemode:SetText("[Toggle Vehicle Mode]")
		vrmod_quickmenu_vehiclemode:SetConVar("vrmod_quickmenu_togglevehiclemode")
		vrmod_quickmenu_vehiclemode:SizeToContents()
		local UI_defaultbutton = vgui.Create("DButton", MenuTab03)
		UI_defaultbutton:SetText("setdefaultvalue")
		UI_defaultbutton:SetPos(190, 315)
		UI_defaultbutton:SetSize(160, 30)
		UI_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_quickmenu_mapbrowser_enable", "1")
			RunConsoleCommand("vrmod_quickmenu_exit", "1")
			RunConsoleCommand("vrmod_quickmenu_vgui_reset_menu", "0")
			RunConsoleCommand("vrmod_quickmenu_seated_menu", "1")
			RunConsoleCommand("vrmod_quickmenu_chat", "1")
			RunConsoleCommand("vrmod_quickmenu_vre_gbradial_menu", "1")
			RunConsoleCommand("vrmod_quickmenu_togglevehiclemode", "0")
			RunConsoleCommand("vrmod_attach_weaponmenu", "1")
			RunConsoleCommand("vrmod_attach_quickmenu", "1")
			RunConsoleCommand("vrmod_attach_popup", "1")
			RunConsoleCommand("vre_ui_attachtohand", "0")
			RunConsoleCommand("vrmod_ui_outline", "0")
		end
		UI_defaultbutton.DoRightClick = function() end
		local MenuTab04 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("HUD", MenuTab04, "icon16/layers.png")
		MenuTab04.Paint = function(self, w, h) end
		local vrmod_hud = MenuTab04:Add("DCheckBoxLabel")
		vrmod_hud:SetPos(20, 10)
		vrmod_hud:SetText("Hud Enable")
		vrmod_hud:SetConVar("vrmod_hud")
		vrmod_hud:SizeToContents()
		local hudcurve = vgui.Create("DNumSlider", MenuTab04)
		hudcurve:SetPos(20, 30)
		hudcurve:SetSize(370, 25)
		hudcurve:SetText("Hud curve")
		hudcurve:SetMin(1)
		hudcurve:SetMax(60)
		hudcurve:SetDecimals(0)
		hudcurve:SetConVar("vrmod_hudcurve")
		hudcurve.OnValueChanged = function(self, value) end
		local huddistance = vgui.Create("DNumSlider", MenuTab04)
		huddistance:SetPos(20, 55)
		huddistance:SetSize(370, 25)
		huddistance:SetText("Hud distance")
		huddistance:SetMin(1)
		huddistance:SetMax(60)
		huddistance:SetDecimals(0)
		huddistance:SetConVar("vrmod_huddistance")
		huddistance.OnValueChanged = function(self, value) end
		local hudscale = vgui.Create("DNumSlider", MenuTab04)
		hudscale:SetPos(20, 80)
		hudscale:SetSize(370, 25)
		hudscale:SetText("Hud scale")
		hudscale:SetMin(0.01)
		hudscale:SetMax(0.1)
		hudscale:SetDecimals(2)
		hudscale:SetConVar("vrmod_hudscale")
		hudscale.OnValueChanged = function(self, value) end
		local hudtestalpha = vgui.Create("DNumSlider", MenuTab04)
		hudtestalpha:SetPos(20, 105)
		hudtestalpha:SetSize(370, 25)
		hudtestalpha:SetText("Hud alpha Transparency")
		hudtestalpha:SetMin(0)
		hudtestalpha:SetMax(255)
		hudtestalpha:SetDecimals(0)
		hudtestalpha:SetConVar("vrmod_hudtestalpha")
		hudtestalpha.OnValueChanged = function(self, value) end
		local vrmod_test_ui_testver = MenuTab04:Add("DCheckBoxLabel")
		vrmod_test_ui_testver:SetPos(20, 135)
		vrmod_test_ui_testver:SetText("vrmod_test_ui_testver")
		vrmod_test_ui_testver:SetConVar("vrmod_test_ui_testver")
		vrmod_test_ui_testver:SizeToContents()
		local vrmod_hud_visible_quickmenukey = MenuTab04:Add("DCheckBoxLabel")
		vrmod_hud_visible_quickmenukey:SetPos(20, 165)
		vrmod_hud_visible_quickmenukey:SetText("HUD only while pressing menu key")
		vrmod_hud_visible_quickmenukey:SetConVar("vrmod_hud_visible_quickmenukey")
		vrmod_hud_visible_quickmenukey:SizeToContents()
		local attach_quickmenu = vgui.Create("DComboBox", MenuTab04)
		attach_quickmenu:SetPos(20, 215)
		attach_quickmenu:SetSize(320, 25)
		attach_quickmenu:SetText("[quickmenu Attach Position]")
		attach_quickmenu:AddChoice("left hand")
		attach_quickmenu:AddChoice("ﾊ・buggy)")
		attach_quickmenu:AddChoice("HMD")
		attach_quickmenu:AddChoice("Right Static")
		attach_quickmenu.OnSelect = function(self, index, value)
			LocalPlayer():ConCommand("vrmod_attach_quickmenu " .. index)
		end
		local attach_weaponmenu = vgui.Create("DComboBox", MenuTab04)
		attach_weaponmenu:SetPos(20, 245)
		attach_weaponmenu:SetSize(320, 25)
		attach_weaponmenu:SetText("[weaponmenu Attach Position]")
		attach_weaponmenu:AddChoice("left hand")
		attach_weaponmenu:AddChoice("ﾊ・buggy)")
		attach_weaponmenu:AddChoice("HMD")
		attach_weaponmenu:AddChoice("Right Static")
		attach_weaponmenu.OnSelect = function(self, index, value)
			LocalPlayer():ConCommand("vrmod_attach_weaponmenu " .. index)
		end
		local attach_popup = vgui.Create("DComboBox", MenuTab04)
		attach_popup:SetPos(20, 275)
		attach_popup:SetSize(320, 25)
		attach_popup:SetText("[popup Window Attach Position]")
		attach_popup:AddChoice("left hand")
		attach_popup:AddChoice("ﾊ・buggy)")
		attach_popup:AddChoice("HMD")
		attach_popup:AddChoice("Right Static")
		attach_popup.OnSelect = function(self, index, value)
			LocalPlayer():ConCommand("vrmod_attach_popup " .. index)
		end
		local vremenu_attach = MenuTab04:Add("DCheckBoxLabel")
		vremenu_attach:SetPos(20, 310)
		vremenu_attach:SetText("[VRE UI LeftHand]")
		vremenu_attach:SetConVar("vre_ui_attachtohand")
		vremenu_attach:SizeToContents()
		local vrmod_ui_outline = MenuTab04:Add("DCheckBoxLabel")
		vrmod_ui_outline:SetPos(20, 335)
		vrmod_ui_outline:SetText("[Menu&UI Red outline]")
		vrmod_ui_outline:SetConVar("vrmod_ui_outline")
		vrmod_ui_outline:SizeToContents()
		local HUD_defaultbutton = vgui.Create("DButton", MenuTab04)
		HUD_defaultbutton:SetText("setdefaultvalue")
		HUD_defaultbutton:SetPos(190, 310)
		HUD_defaultbutton:SetSize(160, 30)
		HUD_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_hud", "1")
			RunConsoleCommand("vrmod_hudcurve", "60")
			RunConsoleCommand("vrmod_huddistance", "60")
			RunConsoleCommand("vrmod_hudscale", "0.05")
			RunConsoleCommand("vrmod_hudtestalpha", "0")
			RunConsoleCommand("vrmod_test_ui_testver", "0")
			RunConsoleCommand("vrmod_hudblacklist", "")
			RunConsoleCommand("vrmod_hud_visible_quickmenukey", "0")
		end
		HUD_defaultbutton.DoRightClick = function() end
		local MenuTab05 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("Character", MenuTab05, "icon16/user_edit.png")
		MenuTab05.Paint = function(self, w, h) end
		local characterEyeHeight = vgui.Create("DNumSlider", MenuTab05)
		characterEyeHeight:SetPos(20, 10)
		characterEyeHeight:SetSize(370, 25)
		characterEyeHeight:SetText("characterEyeHeight")
		characterEyeHeight:SetMin(10.0)
		characterEyeHeight:SetMax(100.8)
		characterEyeHeight:SetDecimals(1)
		characterEyeHeight:SetConVar("vrmod_characterEyeHeight")
		characterEyeHeight.OnValueChanged = function(self, value) end
		local crouchthreshold = vgui.Create("DNumSlider", MenuTab05)
		crouchthreshold:SetPos(20, 30)
		crouchthreshold:SetSize(370, 25)
		crouchthreshold:SetText("crouchthreshold")
		crouchthreshold:SetMin(10.0)
		crouchthreshold:SetMax(100.0)
		crouchthreshold:SetDecimals(1)
		crouchthreshold:SetConVar("vrmod_crouchthreshold")
		crouchthreshold.OnValueChanged = function(self, value) end
		local characterHeadToHmdDist = vgui.Create("DNumSlider", MenuTab05)
		characterHeadToHmdDist:SetPos(20, 50)
		characterHeadToHmdDist:SetSize(370, 25)
		characterHeadToHmdDist:SetText("characterHeadToHmdDist")
		characterHeadToHmdDist:SetMin(-15.3)
		characterHeadToHmdDist:SetMax(15.3)
		characterHeadToHmdDist:SetDecimals(2)
		characterHeadToHmdDist:SetConVar("vrmod_characterHeadToHmdDist")
		characterHeadToHmdDist.OnValueChanged = function(self, value) end
		local vrmod_znear = vgui.Create("DNumSlider", MenuTab05)
		vrmod_znear:SetPos(20, 90)
		vrmod_znear:SetSize(370, 110)
		vrmod_znear:SetText("[znear]\n(VRMod Restart Requied)\nObjects at distances less than\nthis value become transparent\nIf you are using a player model\nwith hair or head parts\nthat appear in front of you\nyou may want to set a larger\nvalue.")
		vrmod_znear:SetMin(1.00)
		vrmod_znear:SetMax(20.00)
		vrmod_znear:SetDecimals(0)
		vrmod_znear:SetConVar("vrmod_znear")
		vrmod_znear.OnValueChanged = function(self, value) end
		local character_restart = vgui.Create("DButton", MenuTab05)
		character_restart:SetText("Manual Apply \n (VRMod Restart)")
		character_restart:SetPos(190, 220)
		character_restart:SetSize(160, 30)
		character_restart.DoClick = function()
			RunConsoleCommand("vrmod_restart")
		end
		character_restart.DoRightClick = function()
			RunConsoleCommand("vrmod_restart")
		end
		local character_auto = vgui.Create("DButton", MenuTab05)
		character_auto:SetText("AutoAdjest \n (VRMod Restart)")
		character_auto:SetPos(20, 220)
		character_auto:SetSize(160, 30)
		character_auto.DoClick = function()
			RunConsoleCommand("vrmod_character_auto")
			timer.Simple(
				2,
				function()
					RunConsoleCommand("vrmod_scale_auto")
				end
			)
			timer.Simple(
				1,
				function()
					RunConsoleCommand("vrmod_restart")
				end
			)
		end
		character_auto.DoRightClick = function()
			RunConsoleCommand("vrmod_character_auto")
		end
		local ToggleMirror = vgui.Create("DButton", MenuTab05)
		ToggleMirror:SetText("Toggle Mirror")
		ToggleMirror:SetPos(20, 310)
		ToggleMirror:SetSize(160, 30)
		ToggleMirror.DoClick = function()
			if GetConVar("vrmod_heightmenu"):GetBool() then
				VRUtilMenuClose("heightmenu")
				convars.vrmod_heightmenu:SetBool(false)
			else
				VRUtilOpenHeightMenu()
				convars.vrmod_heightmenu:SetBool(true)
			end
		end
		local character_reset = vgui.Create("DButton", MenuTab05)
		character_reset:SetText("setdefaultvalue")
		character_reset:SetPos(190, 310)
		character_reset:SetSize(160, 30)
		character_reset.DoClick = function()
			RunConsoleCommand("vrmod_characterEyeHeight", "66.8")
			RunConsoleCommand("vrmod_crouchthreshold", "40")
			RunConsoleCommand("vrmod_characterHeadToHmdDist", "6.3")
			RunConsoleCommand("vrmod_znear", "6.0")
			RunConsoleCommand("vrmod_scale", "38.7")
			RunConsoleCommand("vrmod_seated", "0")
			RunConsoleCommand("vrmod_seatedoffset", "0")
			RunConsoleCommand("vrmod_oldcharacteryaw", "1")
			RunConsoleCommand("vrmod_character_reset")
		end
		character_reset.DoRightClick = function() end
		local MenuTab06 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("Character02", MenuTab06, "icon16/user_edit.png")
		MenuTab06.Paint = function(self, w, h) end
		local scale = vgui.Create("DLabel", MenuTab06)
		scale:SetPos(20, 5)
		scale:SetText("scale")
		local scaleplus = vgui.Create("DButton", MenuTab06)
		scaleplus:SetText("+")
		scaleplus:SetPos(20, 25)
		scaleplus:SetSize(160, 25)
		scaleplus.DoClick = function()
			g_VR.scale = g_VR.scale + 0.5
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		scaleplus.DoRightClick = function()
			g_VR.scale = g_VR.scale + 1.0
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		local scaleminus = vgui.Create("DButton", MenuTab06)
		scaleminus:SetText("-")
		scaleminus:SetPos(190, 25)
		scaleminus:SetSize(160, 25)
		scaleminus.DoClick = function()
			g_VR.scale = g_VR.scale - 0.5
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		scaleminus.DoRightClick = function()
			g_VR.scale = g_VR.scale - 1.0
			convars.vrmod_scale:SetFloat(g_VR.scale)
		end
		local oldcharacteryaw = MenuTab06:Add("DCheckBoxLabel")
		oldcharacteryaw:SetPos(20, 180)
		oldcharacteryaw:SetText("Alternative Character Yaw")
		oldcharacteryaw:SetConVar("vrmod_oldcharacteryaw")
		oldcharacteryaw:SizeToContents()
		local animation_Enable = MenuTab06:Add("DCheckBoxLabel")
		animation_Enable:SetPos(20, 200)
		animation_Enable:SetText("Character_Animation_Enable (Client)")
		animation_Enable:SetConVar("vrmod_animation_Enable")
		animation_Enable:SizeToContents()
		local seatedmode = MenuTab06:Add("DCheckBoxLabel")
		seatedmode:SetPos(20, 240)
		seatedmode:SetText("Enable seated mode")
		seatedmode:SetConVar("vrmod_seated")
		seatedmode:SizeToContents()
		local seatedoffset = vgui.Create("DNumSlider", MenuTab06)
		seatedoffset:SetPos(20, 260)
		seatedoffset:SetSize(370, 25)
		seatedoffset:SetText("Seated Offset")
		seatedoffset:SetMin(-66.80)
		seatedoffset:SetMax(66.80)
		seatedoffset:SetDecimals(2)
		seatedoffset:SetConVar("vrmod_seatedoffset")
		seatedoffset.OnValueChanged = function(self, value) end
		local ToggleMirror = vgui.Create("DButton", MenuTab06)
		ToggleMirror:SetText("Toggle Mirror")
		ToggleMirror:SetPos(20, 310)
		ToggleMirror:SetSize(160, 30)
		ToggleMirror.DoClick = function()
			if GetConVar("vrmod_heightmenu"):GetBool() then
				VRUtilMenuClose("heightmenu")
				convars.vrmod_heightmenu:SetBool(false)
			else
				VRUtilOpenHeightMenu()
				convars.vrmod_heightmenu:SetBool(true)
			end
		end
		local character_reset = vgui.Create("DButton", MenuTab06)
		character_reset:SetText("setdefaultvalue")
		character_reset:SetPos(190, 310)
		character_reset:SetSize(160, 30)
		character_reset.DoClick = function()
			RunConsoleCommand("vrmod_characterEyeHeight", "66.8")
			RunConsoleCommand("vrmod_crouchthreshold", "40")
			RunConsoleCommand("vrmod_characterHeadToHmdDist", "6.3")
			RunConsoleCommand("vrmod_znear", "6.0")
			RunConsoleCommand("vrmod_scale", "38.7")
			RunConsoleCommand("vrmod_seated", "0")
			RunConsoleCommand("vrmod_seatedoffset", "0")
			RunConsoleCommand("vrmod_oldcharacteryaw", "1")
			RunConsoleCommand("vrmod_character_reset")
		end
		character_reset.DoRightClick = function() end
		local animationSettings = vgui.Create("DForm", sheet)
		sheet:AddSheet("Animation", animationSettings, "icon16/user_edit.png")
		animationSettings:DockPadding(0, 0, 0, 0)
		animationSettings:TextEntry("Idle Animation", "vrmod_idle_act")
		animationSettings:TextEntry("Walk Animation", "vrmod_walk_act")
		animationSettings:TextEntry("Run Animation", "vrmod_run_act")
		animationSettings:TextEntry("Jump Animation", "vrmod_jump_act")
		local helpText = animationSettings:Help("Enter animation names (e.g., ACT_HL2MP_IDLE)")
		helpText:DockMargin(0, 10, 0, 0)
		local defaultButton = vgui.Create("DButton", animationSettings)
		defaultButton:SetText("Reset to Default")
		defaultButton:Dock(TOP)
		defaultButton:DockMargin(0, 10, 0, 0)
		defaultButton.DoClick = function()
			RunConsoleCommand("vrmod_idle_act", "ACT_HL2MP_IDLE")
			RunConsoleCommand("vrmod_walk_act", "ACT_HL2MP_WALK")
			RunConsoleCommand("vrmod_run_act", "ACT_HL2MP_RUN")
			RunConsoleCommand("vrmod_jump_act", "ACT_HL2MP_JUMP_PASSIVE")
		end
		local MenuTab07 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("Network(Server)", MenuTab07, "icon16/ipod_cast_add.png")
		MenuTab07.Paint = function(self, w, h) end
		local net_delay = vgui.Create("DNumSlider", MenuTab07)
		net_delay:SetPos(20, 25)
		net_delay:SetSize(370, 25)
		net_delay:SetText("net_delay")
		net_delay:SetMin(0.000)
		net_delay:SetMax(1.000)
		net_delay:SetDecimals(3)
		net_delay:SetConVar("vrmod_net_delay")
		net_delay.OnValueChanged = function(self, value) end
		local net_delaymax = vgui.Create("DNumSlider", MenuTab07)
		net_delaymax:SetPos(20, 50)
		net_delaymax:SetSize(370, 25)
		net_delaymax:SetText("net_delaymax")
		net_delaymax:SetMin(1.00)
		net_delaymax:SetMax(100.00)
		net_delaymax:SetDecimals(3)
		net_delaymax:SetConVar("vrmod_net_delaymax")
		net_delaymax.OnValueChanged = function(self, value) end
		local net_storedframes = vgui.Create("DNumSlider", MenuTab07)
		net_storedframes:SetPos(20, 75)
		net_storedframes:SetSize(370, 25)
		net_storedframes:SetText("net_storedframes")
		net_storedframes:SetMin(1.00)
		net_storedframes:SetMax(25.00)
		net_storedframes:SetDecimals(3)
		net_storedframes:SetConVar("vrmod_net_storedframes")
		net_storedframes.OnValueChanged = function(self, value) end
		local net_tickrate = vgui.Create("DNumSlider", MenuTab07)
		net_tickrate:SetPos(20, 100)
		net_tickrate:SetSize(370, 25)
		net_tickrate:SetText("net_tickrate")
		net_tickrate:SetMin(1.00)
		net_tickrate:SetMax(100.00)
		net_tickrate:SetDecimals(3)
		net_tickrate:SetConVar("vrmod_net_tickrate")
		net_tickrate.OnValueChanged = function(self, value) end
		local allow_teleport = MenuTab07:Add("DCheckBoxLabel")
		allow_teleport:SetPos(20, 130)
		allow_teleport:SetText("server allow VRteleport")
		allow_teleport:SetConVar("vrmod_allow_teleport")
		allow_teleport:SizeToContents()
		local net_defaultbutton = vgui.Create("DButton", MenuTab07)
		net_defaultbutton:SetText("setdefaultvalue")
		net_defaultbutton:SetPos(190, 310)
		net_defaultbutton:SetSize(160, 30)
		net_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_net_tickrate", "67")
			RunConsoleCommand("vrmod_net_storedframes", "15")
			RunConsoleCommand("vrmod_net_delaymax", "0.2")
			RunConsoleCommand("vrmod_net_delay", "0.1")
			RunConsoleCommand("vrmod_allow_teleport", true)
		end
		net_defaultbutton.DoRightClick = function() end
		local MenuTab08 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("Misc", MenuTab08, "icon16/computer_edit.png")
		MenuTab08.Paint = function(self, w, h) end
		local showonstartup = MenuTab08:Add("DCheckBoxLabel")
		showonstartup:SetPos(20, 10)
		showonstartup:SetText("VRMod Menu showonstartup")
		showonstartup:SetConVar("vrmod_showonstartup")
		showonstartup:SizeToContents()
		local autoarcbench_button = MenuTab08:Add("DCheckBoxLabel")
		autoarcbench_button:SetPos(20, 35)
		autoarcbench_button:SetText("Auto Optimize (ArcCW/Arc9/TFA)")
		autoarcbench_button:SetConVar("vrmod_auto_arc_benchgun")
		autoarcbench_button:SizeToContents()
		local manualpickup = MenuTab08:Add("DCheckBoxLabel")
		manualpickup:SetPos(20, 55)
		manualpickup:SetText("[vrmod_manualpickups(Server)]\nUse of this requires\n{VRMod Manual Item Pickup}\nby Dr. Hugo.")
		manualpickup:SetConVar("vrmod_manualpickups")
		manualpickup:SizeToContents()
		local vrmod_data_vmt_generate_test = vgui.Create("DButton", MenuTab08)
		vrmod_data_vmt_generate_test:SetText("Config Data Generate\n")
		vrmod_data_vmt_generate_test:SetPos(20, 210)
		vrmod_data_vmt_generate_test:SetSize(160, 30)
		vrmod_data_vmt_generate_test.DoClick = function()
			RunConsoleCommand("vrmod_data_vmt_generate_test")
		end
		local vrmod_error_check_method = MenuTab08:Add("DCheckBoxLabel")
		vrmod_error_check_method:SetPos(20, 250)
		vrmod_error_check_method:SetText("[error_check_method]\nIf it does not start VRMod\n change this and restart.")
		vrmod_error_check_method:SetConVar("vrmod_error_check_method")
		vrmod_error_check_method:SizeToContents()
		local error_hard = MenuTab08:Add("DCheckBoxLabel")
		error_hard:SetPos(20, 295)
		error_hard:SetText("Module Error VRMod Lock")
		error_hard:SetConVar("vrmod_error_hard")
		error_hard:SizeToContents()
		local vrmod_menu_type = MenuTab08:Add("DCheckBoxLabel")
		vrmod_menu_type:SetPos(20, 310)
		vrmod_menu_type:SetText("VRMod Menu Type")
		vrmod_menu_type:SetConVar("vrmod_menu_type")
		vrmod_menu_type:SizeToContents()
		local MenuTab09 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("Misc02", MenuTab09, "icon16/computer_edit.png")
		MenuTab09.Paint = function(self, w, h) end
		local lefthand = MenuTab09:Add("DCheckBoxLabel")
		lefthand:SetPos(20, 10)
		lefthand:SetText("LeftHand\n(WIP)")
		lefthand:SetConVar("vrmod_LeftHand")
		lefthand:SizeToContents()
		local lefthandleftfire = MenuTab09:Add("DCheckBoxLabel")
		lefthandleftfire:SetPos(130, 10)
		lefthandleftfire:SetText("lefthand leftfire\n(WIP)")
		lefthandleftfire:SetConVar("vrmod_lefthandleftfire")
		lefthandleftfire:SizeToContents()
		local lefthandholdmode = MenuTab09:Add("DCheckBoxLabel")
		lefthandholdmode:SetPos(250, 10)
		lefthandholdmode:SetText("lefthand holdmode\n(WIP)")
		lefthandholdmode:SetConVar("vrmod_LeftHandmode")
		lefthandholdmode:SizeToContents()
		local ui_realtime = MenuTab09:Add("DCheckBoxLabel")
		ui_realtime:SetPos(20, 50)
		ui_realtime:SetText("UI Render Alternative")
		ui_realtime:SetConVar("vrmod_ui_realtime")
		ui_realtime:SizeToContents()
		local cameraoverride = vgui.Create("DCheckBoxLabel", MenuTab09)
		cameraoverride:SetPos(20, 90)
		cameraoverride:SetSize(320, 25)
		cameraoverride:SetText("[Desktop_CameraOverride]\nON = Default. The VR view is directly reflected in the gmod window.\nOFF = If you use a TPSmod or similar, the gmod window will be\n            the screen of the camera mod.\n(If OFF,There is a bug that your body will not be reflected\nwhen you are not using a camera mod, etc.)")
		cameraoverride:SetConVar("vrmod_cameraoverride")
		cameraoverride.OnValueChanged = function(self, value) end
		local lvs_pickup_handle = MenuTab09:Add("DCheckBoxLabel")
		lvs_pickup_handle:SetPos(20, 210)
		lvs_pickup_handle:SetText("Enable LVS Pickup Handle")
		lvs_pickup_handle:SetConVar("vrmod_lvs_pickup_handle")
		lvs_pickup_handle:SizeToContents()
		local pmchange = MenuTab09:Add("DCheckBoxLabel")
		pmchange:SetPos(20, 230)
		pmchange:SetText("Enable Player Model Change")
		pmchange:SetConVar("vrmod_pmchange")
		pmchange:SizeToContents()
		local vrmod_keyboard_uichatkey = MenuTab09:Add("DCheckBoxLabel")
		vrmod_keyboard_uichatkey:SetPos(20, 250)
		vrmod_keyboard_uichatkey:SetText("vrmod_keyboard_uichatkey")
		vrmod_keyboard_uichatkey:SetConVar("vrmod_keyboard_uichatkey")
		vrmod_keyboard_uichatkey:SizeToContents()
		local pickup_disable_client = MenuTab09:Add("DCheckBoxLabel")
		pickup_disable_client:SetPos(20, 270)
		pickup_disable_client:SetText("Disable Pickup Client")
		pickup_disable_client:SetConVar("vr_pickup_disable_client")
		pickup_disable_client:SizeToContents()
		local MenuTab13 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("Misc03", MenuTab13, "icon16/wrench.png")
		MenuTab13.Paint = function(self, w, h) end
		local vrmod_rtWidth_Multiplier = vgui.Create("DNumSlider", MenuTab13)
		vrmod_rtWidth_Multiplier:SetPos(20, 10)
		vrmod_rtWidth_Multiplier:SetSize(370, 25)
		vrmod_rtWidth_Multiplier:SetText("[vrmod_rtWidth_Multiplier]")
		vrmod_rtWidth_Multiplier:SetMin(0.1)
		vrmod_rtWidth_Multiplier:SetMax(5.0)
		vrmod_rtWidth_Multiplier:SetDecimals(1)
		vrmod_rtWidth_Multiplier:SetConVar("vrmod_rtWidth_Multiplier")
		vrmod_rtWidth_Multiplier.OnValueChanged = function(self, value) end
		local vrmod_rtHeight_Multiplier = vgui.Create("DNumSlider", MenuTab13)
		vrmod_rtHeight_Multiplier:SetPos(20, 50)
		vrmod_rtHeight_Multiplier:SetSize(370, 25)
		vrmod_rtHeight_Multiplier:SetText("[vrmod_rtHeight_Multiplier]")
		vrmod_rtHeight_Multiplier:SetMin(0.1)
		vrmod_rtHeight_Multiplier:SetMax(5.0)
		vrmod_rtHeight_Multiplier:SetDecimals(1)
		vrmod_rtHeight_Multiplier:SetConVar("vrmod_rtHeight_Multiplier")
		vrmod_rtHeight_Multiplier.OnValueChanged = function(self, value) end
		local vrmod_reset_render_targets = vgui.Create("DButton", MenuTab13)
		vrmod_reset_render_targets:SetText("reset_render")
		vrmod_reset_render_targets:SetPos(20, 280)
		vrmod_reset_render_targets:SetSize(160, 30)
		vrmod_reset_render_targets.DoClick = function()
			RunConsoleCommand("vrmod_reset_render_targets")
		end
		local vrmod_update_render_targets = vgui.Create("DButton", MenuTab13)
		vrmod_update_render_targets:SetText("update_render")
		vrmod_update_render_targets:SetPos(190, 280)
		vrmod_update_render_targets:SetSize(160, 30)
		vrmod_update_render_targets.DoClick = function()
			RunConsoleCommand("vrmod_update_render_targets")
		end
		local Height_Beta = vgui.Create("DButton", MenuTab13)
		Height_Beta:SetText("Width&Height\nCustom (Quest2&VirtualDesktop)")
		Height_Beta:SetPos(20, 315)
		Height_Beta:SetSize(160, 30)
		Height_Beta.DoClick = function()
			RunConsoleCommand("vrmod_rtWidth_Multiplier", "2.5")
			RunConsoleCommand("vrmod_rtHeight_Multiplier", "1.2")
			RunConsoleCommand("vrmod_restart")
		end
		Height_Beta.DoRightClick = function() end
		local misc3_defaultbutton = vgui.Create("DButton", MenuTab13)
		misc3_defaultbutton:SetText("setdefaultvalue")
		misc3_defaultbutton:SetPos(190, 315)
		misc3_defaultbutton:SetSize(160, 30)
		misc3_defaultbutton.DoClick = function()
			RunConsoleCommand("vrmod_rtWidth_Multiplier", "2.0")
			RunConsoleCommand("vrmod_rtHeight_Multiplier", "1.0")
			RunConsoleCommand("vrmod_restart")
		end
		misc3_defaultbutton.DoRightClick = function() end
		local MenuTab10 = vgui.Create("DPanel", sheet)
		sheet:AddSheet("GameRebootRequied", MenuTab10, "icon16/computer_edit.png")
		MenuTab10.Paint = function(self, w, h) end
		local vrmod_ScrH = vgui.Create("DNumSlider", MenuTab10)
		vrmod_ScrH:SetPos(20, 10)
		vrmod_ScrH:SetSize(330, 25)
		vrmod_ScrH:SetText("[VR_UI Height]")
		vrmod_ScrH:SetMin(480)
		vrmod_ScrH:SetMax(ScrH() * 2)
		vrmod_ScrH:SetDecimals(0)
		vrmod_ScrH:SetConVar("vrmod_ScrH")
		vrmod_ScrH.OnValueChanged = function(self, value) end
		local vrmod_ScrW = vgui.Create("DNumSlider", MenuTab10)
		vrmod_ScrW:SetPos(20, 30)
		vrmod_ScrW:SetSize(330, 25)
		vrmod_ScrW:SetText("[VR_UI Weight]")
		vrmod_ScrW:SetMin(640)
		vrmod_ScrW:SetMax(ScrW() * 2)
		vrmod_ScrW:SetDecimals(0)
		vrmod_ScrW:SetConVar("vrmod_ScrW")
		vrmod_ScrW.OnValueChanged = function(self, value) end
		local vrmod_hud_ScrH = vgui.Create("DNumSlider", MenuTab10)
		vrmod_hud_ScrH:SetPos(20, 60)
		vrmod_hud_ScrH:SetSize(330, 25)
		vrmod_hud_ScrH:SetText("[VR_HUD Height]")
		vrmod_hud_ScrH:SetMin(480)
		vrmod_hud_ScrH:SetMax(ScrH() * 2)
		vrmod_hud_ScrH:SetDecimals(0)
		vrmod_hud_ScrH:SetConVar("vrmod_ScrH_hud")
		vrmod_hud_ScrH.OnValueChanged = function(self, value) end
		local vrmod_ScrW_hud = vgui.Create("DNumSlider", MenuTab10)
		vrmod_ScrW_hud:SetPos(20, 80)
		vrmod_ScrW_hud:SetSize(330, 25)
		vrmod_ScrW_hud:SetText("[VR_HUD Weight]")
		vrmod_ScrW_hud:SetMin(640)
		vrmod_ScrW_hud:SetMax(ScrW() * 2)
		vrmod_ScrW_hud:SetDecimals(0)
		vrmod_ScrW_hud:SetConVar("vrmod_ScrW_hud")
		vrmod_ScrW_hud.OnValueChanged = function(self, value) end
		local vrmod_scr_alwaysautosetting = MenuTab10:Add("DCheckBoxLabel")
		vrmod_scr_alwaysautosetting:SetPos(20, 120)
		vrmod_scr_alwaysautosetting:SetText("[Automatic resolution set]")
		vrmod_scr_alwaysautosetting:SetConVar("vrmod_scr_alwaysautosetting")
		vrmod_scr_alwaysautosetting:SizeToContents()
		local PanelEMSTOP = vgui.Create("DPanel", sheet)
		sheet:AddSheet("VRStop Key", PanelEMSTOP, "icon16/stop.png")
		PanelEMSTOP.Paint = function(self, w, h) end
		local emergStopKeyBinder = vgui.Create("DBinder", PanelEMSTOP)
		emergStopKeyBinder:SetPos(20, 20)
		emergStopKeyBinder:SetSize(300, 20)
		emergStopKeyBinder:SetConVar("vrmod_emergencystop_key")
		local emergStopHoldTime = vgui.Create("DNumSlider", PanelEMSTOP)
		emergStopHoldTime:SetPos(20, 50)
		emergStopHoldTime:SetSize(330, 30)
		emergStopHoldTime:SetText("Hold Time for \n Emergency Stop (Seconds)")
		emergStopHoldTime:SetMin(0.0)
		emergStopHoldTime:SetMax(10.0)
		emergStopHoldTime:SetDecimals(2)
		emergStopHoldTime:SetConVar("vrmod_emergencystop_time")
	end
)
-- --------[vrmod_unoff_addmenu.lua]End--------