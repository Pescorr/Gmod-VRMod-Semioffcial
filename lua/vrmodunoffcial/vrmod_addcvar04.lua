-- local localply = LocalPlayer()
-- local cameraover = CreateClientConVar("vrmod_cameraoverride", 1, true, FCVAR_ARCHIVE)
-- local currentViewEnt = localply
-- local pos1, ang1
-- local uselefthand = CreateClientConVar("vrmod_LeftHand", "0", true, FCVAR_ARCHIVE)
-- local lefthandmode = CreateClientConVar("vrmod_LeftHandmode", "0", true, FCVAR_ARCHIVE)
-- local leftgripmode = CreateClientConVar("vrmod_leftgripmode", "0", FCVAR_ARCHIVE)
-- hook.Add(
--     "Think",
--     "CustomLeftGripMode",
--     function()
--         VRMOD_SubmitSharedTexture()
--         VRMOD_UpdatePosesAndActions()
--         --handle tracking
--         local rawPoses = VRMOD_GetPoses()
--         for k, v in pairs(rawPoses) do
--             g_VR.tracking[k] = g_VR.tracking[k] or {}
--             local worldPose = g_VR.tracking[k]
--             worldPose.pos, worldPose.ang = LocalToWorld(v.pos * g_VR.scale, v.ang, g_VR.origin, g_VR.originAngle)
--             worldPose.vel = LocalToWorld(v.vel, Angle(0, 0, 0), Vector(0, 0, 0), g_VR.originAngle) * g_VR.scale
--             worldPose.angvel = LocalToWorld(Vector(v.angvel.pitch, v.angvel.yaw, v.angvel.roll), Angle(0, 0, 0), Vector(0, 0, 0), g_VR.originAngle)
--             if k == "pose_righthand" then
--                 worldPose.pos, worldPose.ang = LocalToWorld(g_VR.rightControllerOffsetPos * 0.01 * g_VR.scale, g_VR.rightControllerOffsetAng, worldPose.pos, worldPose.ang)
--             elseif k == "pose_lefthand" then
--                 worldPose.pos, worldPose.ang = LocalToWorld(g_VR.leftControllerOffsetPos * 0.01 * g_VR.scale, g_VR.leftControllerOffsetAng, worldPose.pos, worldPose.ang)
--             end
--         end

--         g_VR.sixPoints = (g_VR.tracking.pose_waist and g_VR.tracking.pose_leftfoot and g_VR.tracking.pose_rightfoot) ~= nil
--         hook.Call("VRMod_Tracking")
--         --handle input
--         g_VR.input, g_VR.changedInputs = VRMOD_GetActions()
--         for k, v in pairs(g_VR.changedInputs) do
--             hook.Call("VRMod_Input", nil, k, v)
--         end

--         --lefthand&foregrip start
--         --gripmode start
--         if leftgripmode:GetBool() then
--             local netFrame = VRUtilNetUpdateLocalPly()
--             --update viewmodel position
--             if g_VR.currentvmi then
--                 local pos, ang = LocalToWorld(g_VR.currentvmi.offsetPos, g_VR.currentvmi.offsetAng, g_VR.tracking.pose_righthand.pos, g_VR.tracking.pose_lefthand.ang)
--                 local posl, angl = LocalToWorld(g_VR.currentvmi.offsetPos, g_VR.currentvmi.offsetAng, g_VR.tracking.pose_righthand.pos, g_VR.tracking.pose_lefthand.ang)
--                 g_VR.viewModelPos = pos
--                 g_VR.viewModelAng = angl
--             end

--             if IsValid(g_VR.viewModel) then
--                 if not g_VR.usingWorldModels then
--                     g_VR.viewModel:SetPos(g_VR.viewModelPos)
--                     g_VR.viewModel:SetAngles(g_VR.viewModelAng)
--                     g_VR.viewModel:SetupBones()
--                     --override hand pose in net frame
--                     if netFrame then
--                         local b = g_VR.viewModel:LookupBone("ValveBiped.Bip01_R_Hand")
--                         if b then
--                             local mtx = g_VR.viewModel:GetBoneMatrix(b)
--                             netFrame.righthandPos = mtx:GetTranslation()
--                             netFrame.righthandAng = mtx:GetAngles() - Angle(0, 0, 180)
--                         end

--                         local c = g_VR.viewModel:LookupBone("ValveBiped.Bip01_L_Hand")
--                         if c then
--                             local mtxl = g_VR.viewModel:GetBoneMatrix(c)
--                             netFrame.lefthandPos = mtxl:GetTranslation()
--                             netFrame.lefthandAng = mtxl:GetAngles() - Angle(0, 0, 0)
--                         end
--                     end
--                 end

--                 g_VR.viewModelMuzzle = g_VR.viewModel:GetAttachment(1)
--             end
--             --gripmode end
--         else
--             --lefthandmode start
--             if uselefthand:GetBool() then
--                 if lefthandmode:GetBool() then
--                     --lefthand-Type2(RhandSimurate) Start
--                     local netFrame = VRUtilNetUpdateLocalPly()
--                     --update viewmodel position
--                     if g_VR.currentvmi then
--                         local pos, ang = LocalToWorld(g_VR.currentvmi.offsetPos, g_VR.currentvmi.offsetAng, g_VR.tracking.pose_lefthand.pos, g_VR.tracking.pose_lefthand.ang)
--                         g_VR.viewModelPos = pos
--                         g_VR.viewModelAng = ang
--                     end

--                     if IsValid(g_VR.viewModel) then
--                         if not g_VR.usingWorldModels then
--                             g_VR.viewModel:SetPos(g_VR.viewModelPos)
--                             g_VR.viewModel:SetAngles(g_VR.viewModelAng)
--                             g_VR.viewModel:SetupBones()
--                             --override hand pose in net frame
--                             if netFrame then
--                                 local b = g_VR.viewModel:LookupBone("ValveBiped.Bip01_R_Hand")
--                                 if b then
--                                     local mtx = g_VR.viewModel:GetBoneMatrix(b)
--                                     netFrame.lefthandPos = mtx:GetTranslation()
--                                     netFrame.lefthandAng = mtx:GetAngles() - Angle(0, 0, 180)
--                                 end
--                             end
--                         end

--                         g_VR.viewModelMuzzle = g_VR.viewModel:GetAttachment(1)
--                     end
--                     --lefthand-Type2(RhandSimurate) end
--                 else
--                     --lefthand-type1(Bip01_L_hand Posirion) start						
--                     local netFrame = VRUtilNetUpdateLocalPly()
--                     --update viewmodel position
--                     if g_VR.currentvmi then
--                         local pos, ang = LocalToWorld(g_VR.currentvmi.offsetPos, g_VR.currentvmi.offsetAng, g_VR.tracking.pose_lefthand.pos, g_VR.tracking.pose_lefthand.ang)
--                         g_VR.viewModelPos = pos
--                         g_VR.viewModelAng = ang
--                     end

--                     if IsValid(g_VR.viewModel) then
--                         if not g_VR.usingWorldModels then
--                             g_VR.viewModel:SetPos(g_VR.viewModelPos)
--                             g_VR.viewModel:SetAngles(g_VR.viewModelAng)
--                             g_VR.viewModel:SetupBones()
--                             --override hand pose in net frame
--                             if netFrame then
--                                 local b = g_VR.viewModel:LookupBone("ValveBiped.Bip01_L_Hand")
--                                 if b then
--                                     local mtx = g_VR.viewModel:GetBoneMatrix(b)
--                                     netFrame.lefthandPos = mtx:GetTranslation()
--                                     netFrame.lefthandAng = mtx:GetAngles() - Angle(0, 0, 0)
--                                 end
--                             end
--                         end

--                         g_VR.viewModelMuzzle = g_VR.viewModel:GetAttachment(1)
--                     end
--                     --lefthand-type1(Bip01_L_hand Posirion) end
--                 end
--                 --lefthandmode end
--             else
--                 --righthand start
--                 local netFrame = VRUtilNetUpdateLocalPly()
--                 --update viewmodel position
--                 if g_VR.currentvmi then
--                     local pos, ang = LocalToWorld(g_VR.currentvmi.offsetPos, g_VR.currentvmi.offsetAng, g_VR.tracking.pose_righthand.pos, g_VR.tracking.pose_righthand.ang)
--                     g_VR.viewModelPos = pos
--                     g_VR.viewModelAng = ang
--                 end

--                 if IsValid(g_VR.viewModel) then
--                     if not g_VR.usingWorldModels then
--                         g_VR.viewModel:SetPos(g_VR.viewModelPos)
--                         g_VR.viewModel:SetAngles(g_VR.viewModelAng)
--                         g_VR.viewModel:SetupBones()
--                         --override hand pose in net frame
--                         if netFrame then
--                             local b = g_VR.viewModel:LookupBone("ValveBiped.Bip01_R_Hand")
--                             if b then
--                                 local mtx = g_VR.viewModel:GetBoneMatrix(b)
--                                 netFrame.righthandPos = mtx:GetTranslation()
--                                 netFrame.righthandAng = mtx:GetAngles() - Angle(0, 0, 180)
--                             end
--                         end
--                     end

--                     g_VR.viewModelMuzzle = g_VR.viewModel:GetAttachment(1)
--                 end
--             end
--             --righthand end
--         end

--         --lefthand&foregrip end
--         --set view according to viewentity
--         local viewEnt = localply:GetViewEntity()
--         if viewEnt ~= localply then
--             local rawPos, rawAng = WorldToLocal(g_VR.tracking.hmd.pos, g_VR.tracking.hmd.ang, g_VR.origin, g_VR.originAngle)
--             if viewEnt ~= currentViewEnt then
--                 local pos, ang = LocalToWorld(rawPos, rawAng, viewEnt:GetPos(), viewEnt:GetAngles())
--                 pos1, ang1 = WorldToLocal(viewEnt:GetPos(), viewEnt:GetAngles(), pos, ang)
--             end

--             rawPos, rawAng = LocalToWorld(rawPos, rawAng, pos1, ang1)
--             g_VR.view.origin, g_VR.view.angles = LocalToWorld(rawPos, rawAng, viewEnt:GetPos(), viewEnt:GetAngles())
--         else
--             g_VR.view.origin, g_VR.view.angles = g_VR.tracking.hmd.pos, g_VR.tracking.hmd.ang
--         end

--         currentViewEnt = viewEnt
--         --
--         g_VR.view.origin = g_VR.view.origin + g_VR.view.angles:Forward() * -(eyez * g_VR.scale)
--         g_VR.eyePosLeft = g_VR.view.origin + g_VR.view.angles:Right() * -(ipd * 0.5 * g_VR.scale)
--         g_VR.eyePosRight = g_VR.view.origin + g_VR.view.angles:Right() * (ipd * 0.5 * g_VR.scale)
--         render.PushRenderTarget(g_VR.rt)
--         -- left
--         g_VR.view.origin = g_VR.eyePosLeft
--         g_VR.view.x = 0
--         g_VR.view.fov = hfovLeft
--         g_VR.view.aspectratio = aspectLeft
--         hook.Call("VRMod_PreRender")
--         render.RenderView(g_VR.view)
--         -- right
--         g_VR.view.origin = g_VR.eyePosRight
--         g_VR.view.x = rtWidthright
--         g_VR.view.fov = hfovRight
--         g_VR.view.aspectratio = aspectRight
--         hook.Call("VRMod_PreRenderRight")
--         render.RenderView(g_VR.view)
--         --
--         if not LocalPlayer():Alive() then
--             cam.Start2D()
--             surface.SetDrawColor(14, 14, 14, 220)
--             surface.DrawRect(0, 0, rtWidth, rtHeight)
--             cam.End2D()
--         end

--         render.PopRenderTarget(g_VR.rt)
--         if desktopView > 1 then
--             surface.SetDrawColor(255, 255, 255, 255)
--             surface.SetMaterial(mat_rt)
--             render.CullMode(1)
--             surface.DrawTexturedRectUV(-1, -1, 2, 2, cropHorizontalOffset, 1 - cropVerticalMargin, 0.5 + cropHorizontalOffset, cropVerticalMargin)
--             render.CullMode(0)
--         end

--         hook.Call("VRMod_PostRender")

--         return cameraover:GetBool()
--     end
-- )